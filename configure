#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize

# check for `cmake` command
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build Directory:
    --builddir=DIR         place build files in directory [build]

  Installation Directories:
    --prefix=PREFIX        installation directory [/usr/local/bro]
    --policydir=PATH       policy file installation directory
                           [PREFIX/share/bro]

  Optional Features:
    --enable-debug         compile with debugging symbols
    --enable-release       compile with optimizations
    --enable-brov6         enable IPv6 processing
    --enable-perftools     use Google's perftools
    --enable-broccoli      build/install the Broccoli library
    --enable-broctl        install Broctl configured in standalone mode 
    --enable-cluster       install Broctl configured for cluster operation
    --enable-auxtools      build and install auxilliary tools located
                           in 'aux/bro-aux' subdirectory

  Required Packages in Non-Standard Locations:
    --with-openssl=PATH    path to OpenSSL install root
    --with-bind=PATH       path to BIND install root
    --with-pcap=PATH       path to libpcap install root
    --with-binpac=PATH     path to BinPAC install root

  Optional Packages in Non-Standard Locations:
    --with-libmagic=PATH   path to libmagic install root
    --with-geoip=PATH      path to the libGeoIP install root
    --with-perftools=PATH  path to Google Perftools install root

  Influential Environment Variables (only on first invocation
  per build directory):
    CC                     C compiler command
    CFLAGS                 C compiler flags
    CXX                    C++ compiler command
    CXXFLAGS               C++ compiler flags
"

sourcedir=`dirname $0`
if [ "$sourcedir" = "." ]; then
    sourcedir=`pwd`
fi

# Function to append a CMake cache entry definition to the
# CMakeCacheEntries variable
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry () {
    CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
}

# set defaults
builddir=build
CMakeCacheEntries=""
append_cache_entry CMAKE_INSTALL_PREFIX PATH   /usr/local/bro
append_cache_entry BRO_ROOT_DIR         PATH   /usr/local/bro
append_cache_entry PY_MOD_INSTALL_DIR   PATH   /usr/local/bro/lib/broctl
append_cache_entry POLICYDIR            STRING /usr/local/bro/share/bro
append_cache_entry ENABLE_DEBUG         BOOL   false
append_cache_entry ENABLE_RELEASE       BOOL   false
append_cache_entry BROv6                BOOL   false
append_cache_entry ENABLE_PERFTOOLS     BOOL   false
append_cache_entry BinPAC_SKIP_INSTALL  BOOL   true
append_cache_entry BUILD_SHARED_LIBS    BOOL   true
append_cache_entry INSTALL_BROCCOLI     BOOL   false
append_cache_entry INSTALL_BROCTL       BOOL   false

# parse arguments
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --builddir=*)
            builddir=$optarg
            ;;
        --prefix=*)
            append_cache_entry CMAKE_INSTALL_PREFIX PATH   $optarg
            append_cache_entry BRO_ROOT_DIR         PATH   $optarg
            append_cache_entry PY_MOD_INSTALL_DIR   PATH   $optarg/lib/broctl
            if [ "$user_set_policydir" != "true" ]; then
                append_cache_entry POLICYDIR        STRING $optarg/share/bro
            fi
            ;;
        --policydir=*)
            append_cache_entry POLICYDIR            STRING $optarg
            user_set_policydir="true"
            ;;
        --enable-debug)
            append_cache_entry ENABLE_DEBUG         BOOL   true
            ;;
        --enable-release)
            append_cache_entry ENABLE_RELEASE       BOOL   true
            ;;
        --enable-brov6)
            append_cache_entry BROv6                BOOL   true
            ;;
        --enable-perftools)
            append_cache_entry ENABLE_PERFTOOLS     BOOL   true
            ;;
        --enable-broccoli)
            append_cache_entry INSTALL_BROCCOLI BOOL true
            ;;
        --enable-broctl)
            append_cache_entry INSTALL_BROCTL BOOL true
            append_cache_entry STANDALONE     BOOL true
            ;;
        --enable-cluster)
            append_cache_entry INSTALL_BROCTL BOOL true
            append_cache_entry STANDALONE     BOOL false
            ;;
        --enable-auxtools)
            append_cache_entry INSTALL_AUX_TOOLS BOOL true
            ;;
        --with-openssl=*)
            append_cache_entry OpenSSL_ROOT_DIR PATH $optarg
            ;;
        --with-bind=*)
            append_cache_entry BIND_ROOT_DIR PATH $optarg
            ;;
        --with-pcap=*)
            append_cache_entry PCAP_ROOT_DIR PATH $optarg
            ;;
        --with-binpac=*)
            append_cache_entry BinPAC_ROOT_DIR PATH $optarg
            ;;
        --with-libmagic=*)
            append_cache_entry LibMagic_ROOT_DIR PATH $optarg
            ;;
        --with-geoip=*)
            append_cache_entry LibGeoIP_ROOT_DIR PATH $optarg
            ;;
        --with-perftools=*)
            append_cache_entry GooglePerftools_ROOT_DIR PATH $optarg
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

# Create build directory
mkdir -p $builddir

echo "Build Directory : $builddir"
echo "Source Directory: $sourcedir"
cd $builddir
cmake $CMakeCacheEntries $sourcedir
