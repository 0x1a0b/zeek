#!/usr/bin/env python
import argparse
import sys

from brolog.BroLogManager import BroLogManager
from brolog.BroLogOptions import BroLogOptions
from brolog.AsciiLogExporter import AsciiLogExporter

def parse_args():
    parser = argparse.ArgumentParser(description='General-purpose tool for manipulating bro log files')
    parser.add_argument('-v', default=False, action='store_true', dest='verbose', help='Explain what the script is doing')
    parser.add_argument('logfiles', metavar='LOGFILE', nargs='+', help='Bro logfiles to load')
    return parser.parse_args()

#def test_filter(entry):
#    return entry['ts'] < 100

def test_iterate(manager):
    #manager['conn'].set_filter(test_filter)
    for e in manager["conn"].entries():
        print e['id.resp_p']

def test_export(manager):
    manager['conn'].export(AsciiLogExporter)

def test_stats(manager):
    connections = manager["conn"]  # or '.get("conn")
    #connections.set_filter(test_filter)
    print 'orig_bytes: ' + str(connections.get_stats('orig_bytes'))
    print 'resp_bytes: ' + str(connections.get_stats('resp_bytes'))
    print 'Top 5 id.orig_p entries:' 
    for x in xrange(min(5, len(connections.get_stats('id.orig_p')) )):
        print str(connections.get_stats('id.orig_p').get_index(x)), 
    print ''
    print 'Top 5 id.resp_p entries:'
    for x in xrange(min(5, len(connections.get_stats('id.resp_p')) )):
        print str(connections.get_stats('id.resp_p').get_index(x)),
    print ''

if __name__ == '__main__':
    args = parse_args()
    BroLogOptions.verbose = args.verbose
    manager = BroLogManager()
    manager.load(args.logfiles)
    if not manager['conn']:
        print 'No log data of type "conn" found.  Exiting...'
        sys.exit(0)
    test_stats(manager)
    # test_iterate(manager)
    # test_export(manager)

