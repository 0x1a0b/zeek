# @TEST-SERIALIZE: brokercomm
# @TEST-REQUIRES: grep -q ENABLE_BROKER:BOOL=true $BUILD/CMakeCache.txt

# @TEST-EXEC: btest-bg-run recv "bro -b ../recv.bro broker_port=$BROKER_PORT >recv.out"
# @TEST-EXEC: btest-bg-run send "bro -b ../send.bro broker_port=$BROKER_PORT >send.out"

# @TEST-EXEC: btest-bg-wait 20
# @TEST-EXEC: btest-diff recv/recv.out
# @TEST-EXEC: btest-diff send/send.out

@TEST-START-FILE recv.bro

const broker_port: port &redef;
redef exit_only_after_terminate = T;

global handler: event(msg: string, c: count);
global auto_handler: event(msg: string, c: count);

event bro_init()
	{
	Broker::enable();
	Broker::subscribe("bro/event/");
	Broker::auto_publish("bro/event/my_topic", auto_handler);
	Broker::listen(broker_port, "127.0.0.1");
	}

global event_count = 0;
global events_to_recv = 6;

event handler(msg: string, n: count)
	{
	++event_count;
	print "handler:", msg, n;

	if ( event_count == events_to_recv )
		{
		terminate();
		return;
		}

	event auto_handler(msg, n);
	local e = Broker::make_event(handler, "pong", n);
	Broker::publish("bro/event/my_topic", e);
	}

@TEST-END-FILE

@TEST-START-FILE send.bro

const broker_port: port &redef;
redef exit_only_after_terminate = T;

global handler: event(msg: string, c: count);
global auto_handler: event(msg: string, c: count);

event bro_init()
	{
	Broker::enable();
	Broker::subscribe("bro/event/my_topic");
	Broker::peer("127.0.0.1", broker_port);
	}

global event_count = 0;

event Broker::status(code: Broker::StatusCode, endpoint: Broker::EndpointInfo, msg: string)
	{
	print code, endpoint, msg;
	if ( code == Broker::PEER_ADDED )
		{
		local e = Broker::make_event(handler, "ping", event_count);
		Broker::publish("bro/event/hi", e);
		++event_count;
		}
	else if ( code == Broker::PEER_LOST )
		{
		terminate();
		}
	else
		{
		print "should not happen"
		}
  }

event handler(msg: string, n: count)
	{
	print "handler:", msg, n;
	local e = Broker::make_event(handler, "ping", event_count);
	Broker::publish("bro/event/hi", e);
	++event_count;
	}

event auto_handler(msg: string, n: count)
	{
	print "auto_handler:", msg, n;
	}

@TEST-END-FILE
