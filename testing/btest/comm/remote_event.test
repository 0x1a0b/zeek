# @TEST_SERIALIZE: brokercomm
# @TEST_REQUIRES: grep -q ENABLE_BROKER $BUILD/CMakeCache.txt

# @TEST-EXEC: btest-bg-run recv "bro -b ../recv.bro >recv.out"
# @TEST-EXEC: btest-bg-run send "bro -b ../send.bro >send.out"

# @TEST-EXEC: btest-bg-wait 20
# @TEST-EXEC: btest-diff recv/recv.out
# @TEST-EXEC: btest-diff send/send.out

@TEST-START-FILE recv.bro

redef exit_only_after_terminate = T;

global event_handler: event(msg: string, c: count);
global auto_event_handler: event(msg: string, c: count);

event bro_init()
	{
	Comm::enable();
	Comm::listen(9999/tcp, "127.0.0.1");
	Comm::subscribe_to_events("bro/event/");
	Comm::auto_event("bro/event/my_topic", auto_event_handler);
	}

global event_count = 0;

event event_handler(msg: string, n: count)
	{
	event auto_event_handler(msg, n);
	print "got event msg", msg, n;
	local args = Comm::event_args(event_handler, "pong", event_count);
	Comm::event("bro/event/my_topic", args);
	++event_count;

	if ( n == 5 )
		terminate();
	}

@TEST-END-FILE

@TEST-START-FILE send.bro

redef exit_only_after_terminate = T;

global event_handler: event(msg: string, c: count);
global auto_event_handler: event(msg: string, c: count);

event bro_init()
	{
	Comm::enable();
	Comm::subscribe_to_events("bro/event/my_topic");
	Comm::connect("127.0.0.1", 9999/tcp, 1secs);
	}

global event_count = 0;

event Comm::outgoing_connection_established(peer_address: string,
                                            peer_port: port,
                                            peer_name: string)
	{
	print "Comm::outgoing_connection_established", peer_address, peer_port;
	local args = Comm::event_args(event_handler, "ping", event_count);
	Comm::event("bro/event/hi", args);
	++event_count;
	}

global done = F;
global done_auto = F;

function check_terminate()
	{
	if ( done && done_auto )
		terminate();
	}

event event_handler(msg: string, n: count)
	{
	print "got event msg", msg, n;
	local args = Comm::event_args(event_handler, "ping", event_count);
    Comm::event("bro/event/hi", args);
	++event_count;

	if ( n == 5 )
		{
		done = T;
		check_terminate();
		}
	}

event auto_event_handler(msg: string, n: count)
	{
	print "got auto event msg", msg, n;

	if ( n == 5 )
		{
		done_auto = T;
		check_terminate();
		}
	}
	
@TEST-END-FILE
