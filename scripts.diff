diff --git a/scripts/base/frameworks/files/main.bro b/scripts/base/frameworks/files/main.bro
index 88fd002..b00f851 100644
--- a/scripts/base/frameworks/files/main.bro
+++ b/scripts/base/frameworks/files/main.bro
@@ -5,6 +5,7 @@
 @load base/frameworks/analyzer
 @load base/frameworks/logging
 @load base/utils/site
+@load base/utils/conn-ids
 
 module Files;
 
@@ -374,11 +375,45 @@ function describe(f: fa_file): string
 	return handler$describe(f);
 	}
 
+function local_get_file_handle(c: connection, is_orig: bool): string
+	{
+    return cat(Analyzer::ANALYZER_HTTP, c$start_time, is_orig, id_string(c$id));
+    }
+
+function local_get_file_handle2(s: string): string
+	{
+    return s;
+    }
+
+function local_get_file_handle3(c: connection, s: string): string
+	{
+    return s;
+    }
+
+global TC: connection;
+
 event get_file_handle(tag: Analyzer::Tag, c: connection, is_orig: bool) &priority=5
 	{
 	if ( tag !in registered_protocols )
 		return;
 
-	local handler = registered_protocols[tag];
-	set_file_handle(handler$get_file_handle(c, is_orig));
+	if ( c$id$resp_p != 80/tcp ) {
+        set_file_handle("");
+        return;
+    }
+
+    local t = cat(Analyzer::ANALYZER_HTTP, c$start_time, is_orig, id_string(c$id));
+        
+	#local handler = registered_protocols[tag];
+    # local f = handler$get_file_handle;
+
+    # Works.
+    #local f = local_get_file_handle2;
+    #local s = f(t);
+
+    # Doesn't work.
+    local f = local_get_file_handle3;
+    local s = f(c, t);
+        
+    set_file_handle(s);
 	}
diff --git a/scripts/base/protocols/http/__load__.bro b/scripts/base/protocols/http/__load__.bro
index 20fcd5f..05ffc7b 100644
--- a/scripts/base/protocols/http/__load__.bro
+++ b/scripts/base/protocols/http/__load__.bro
@@ -1,6 +1,6 @@
 @load ./main
 @load ./entities
 @load ./utils
-@load ./files
+@load ./files   # XXX
 
-@load-sigs ./dpd.sig
\ No newline at end of file
+@load-sigs ./dpd.sig
diff --git a/scripts/base/protocols/http/files.bro b/scripts/base/protocols/http/files.bro
index 840b5a2..760f1e1 100644
--- a/scripts/base/protocols/http/files.bro
+++ b/scripts/base/protocols/http/files.bro
@@ -2,7 +2,6 @@
 @load ./entities
 @load ./utils
 @load base/utils/conn-ids
-@load base/frameworks/files
 
 module HTTP;
 
@@ -14,43 +13,40 @@ export {
 	global describe_file: function(f: fa_file): string;
 }
 
-function get_file_handle(c: connection, is_orig: bool): string
-	{
-	if ( ! c?$http )
-		return "";
+global x: count = 0;
 
-	if ( c$http$range_request && ! is_orig )
-		{
-		# Any multipart responses from the server are pieces of same file
-		# that correspond to range requests, so don't use mime depth to
-		# identify the file.
-		return cat(Analyzer::ANALYZER_HTTP, is_orig, c$id$orig_h, build_url(c$http));
-		}
-	else
-		{
-		local mime_depth = is_orig ? c$http$orig_mime_depth : c$http$resp_mime_depth;
-		return cat(Analyzer::ANALYZER_HTTP, c$start_time, is_orig,
-		           c$http$trans_depth, mime_depth, id_string(c$id));
-		}
-	}
+event connection_established(c: connection)
+{
+    if ( ++x % 1000 == 0 )
+        print network_time();
+}
 
-function describe_file(f: fa_file): string
+function get_file_handle(c: connection, is_orig: bool): string
 	{
-	# This shouldn't be needed, but just in case...
-	if ( f$source != "HTTP" )
-		return "";
-
-	for ( cid in f$conns )
-		{
-		if ( f$conns[cid]?$http )
-			return build_url_http(f$conns[cid]$http);
-		}
-	return "";
+    return cat(Analyzer::ANALYZER_HTTP, c$start_time, is_orig, id_string(c$id));
+        
+#    local s: string;
+#        
+#	if ( c$http$range_request && ! is_orig )
+#		{
+#		# Any multipart responses from the server are pieces of same file
+#		# that correspond to range requests, so don't use mime depth to
+#		# identify the file.
+#		s= cat(Analyzer::ANALYZER_HTTP, is_orig, c$id$orig_h, build_url(c$http));
+#		}
+#	else
+#		{
+#		local mime_depth = is_orig ? c$http$orig_mime_depth : c$http$resp_mime_depth;
+#		s = cat(Analyzer::ANALYZER_HTTP, c$start_time, is_orig,
+#		           c$http$trans_depth, mime_depth, id_string(c$id));
+#		}
+#
+#	if ( T )
+#		return s;
 	}
 
 event bro_init() &priority=5
 	{
 	Files::register_protocol(Analyzer::ANALYZER_HTTP,
-	                         [$get_file_handle = HTTP::get_file_handle,
-	                          $describe        = HTTP::describe_file]);
+	                         [$get_file_handle = HTTP::get_file_handle]);
 	}
