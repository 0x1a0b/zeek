
### event handler that is used to analyze network packets based on DNP3 protocol
### starts with dnp3_
### In src/DNP3.cc, we include detailed descriptions on how DNP3 Pseudo Link Layer, 
### DNP3 Pseudo Transport Layer, DNP3 Pseudo Application Layer are packed into application 
### layer payload over TCP 
### The event handlers defined for binpac DNP3 analyzer are used to analyze fields 
### of the DNP3 Pseudo Application Layer.  
### we have tried our best to name the event handler by the field names that is described 
### in DNP3 Specification Volum 2, Part 1 Basic, Application Layer, DNP3 Specification 
### Volum 4, Data Link Layer, DNP3 Specification Volum 6, Part 1 Basic, DNP3 OBJECT LIBRARY, 
### DNP3 Specification Volum 6, Part 2 Objects, DNP3 OBJECT LIBRARY 

event dnp3_debug_bufferBytes%(c: connection , is_orig: bool, buffer_bytes: count%);


## Generated for the request header in Pseudo Application Layer. 
## The request header contains two fields: 
##    fc: function code.
event dnp3_application_request_header%(c: connection, is_orig: bool, fc: count%);

## Generated for the response header in Pseudo Application Layer.
## The response header contains three fields:
##    app_control: application control field.
##    fc: function code.
##    iin: internal indication number  
event dnp3_application_response_header%(c: connection, is_orig: bool, fc: count, iin: count%);

## Generated for the object header found in both DNP3 requests and responses
##    obj_type: type of object, which is classified based on an 8-bit group number and an 8-bit variation number
##    qua_field: qualifier field
##    rf_low, rf_high: the structure of the range field depends on the qualified field. In some cases, range field 
##       contain only one logic part, e.g., number of objects, so only rf_low contains the useful values; in some 
##       cases, range field contain two logic parts, e.g., start index and stop index, so rf_low contains the start
##       index while rf_high contains the stop index  
event dnp3_object_header%(c: connection, is_orig: bool, obj_type: count, qua_field: count, number: count, rf_low: count, rf_high: count%);

## Generated for the prefix before each object. 
##   the structure and the meaning of the prefix are defined by the qualifier field
event dnp3_object_prefix%(c: connection, is_orig: bool, prefix_value: count%);

## Generated for the additional header that is added by the DNP3.cc; 
## the reason to add this header is found in DNP3.cc
##      start: the first two bytes of the DNP3 Pseudo Link Layer; its value is fixed as 0x0564
##      len:   the "length" field in the DNP3 Pseudo Link Layer
##      ctrl:  the "control" field in the DNP3 Pseudo Link Layer
##      dest_addr: the "destination" field in the DNP3 Pseudo Link Layer
##      src_addr: the "source" field in the DNP3 Pseudo Link Layer
event dnp3_header_block%(c: connection, is_orig: bool, start: count, len: count, ctrl: count, dest_addr: count, src_addr: count%);

## Generated for "Response_Data_Object"
## the "Response_Data_Object" contains two parts: object prefix and objects data. 
## In most cases, objects data are defined by new record types. But in a few
## cases, objects data are directly basic types, such as int16, or int8; thus we use
## a additional data_value to record the values of those object data. 
event dnp3_response_data_object%(c: connection, is_orig: bool, data_value: count%);

## Different from most binpac scripts, which consists only two pac files: *-analyzer.pac
## and *-protocol.pac. I use a separate pac files, i.e., dnp3-objects.pac to contain 
## different types of object data. 
## The following event handlers are all generated for the different object data types.

event dnp3_attribute_common%(c: connection, is_orig: bool, data_type_code: count, leng: count, attribute_obj: string%);

## Generated for the object with the group number 12 and variation number 1
## CROB: control relay output block
event dnp3_crob%(c: connection, is_orig: bool, control_code: count, count8: count, on_time: count, off_time: count, status_code: count%);

## Generated for the object with the group number 12 and variation number 2
## PCB: Pattern Control Block
event dnp3_pcb%(c: connection, is_orig: bool, control_code: count, count8: count, on_time: count, off_time: count, status_code: count%);

## Generated for the object with the group number 20 and variation number 1
## counter 32 bit with flag
event dnp3_counter_32wFlag%(c: connection, is_orig: bool, flag: count, count_value: count%);

## Generated for the object with the group number 20 and variation number 2
## counter 16 bit with flag
event dnp3_counter_16wFlag%(c: connection, is_orig: bool, flag: count, count_value: count%);

## Generated for the object with the group number 20 and variation number 5
## counter 32 bit without flag
event dnp3_counter_32woFlag%(c: connection, is_orig: bool, count_value: count%);

## Generated for the object with the group number 20 and variation number 6
## counter 16 bit without flag
event dnp3_counter_16woFlag%(c: connection, is_orig: bool, count_value: count%);

## Generated for the object with the group number 21 and variation number 1
## frozen counter 32 bit with flag
event dnp3_frozen_counter_32wFlag%(c: connection, is_orig: bool, flag:count, count_value: count%);

## Generated for the object with the group number 21 and variation number 2
## frozen counter 16 bit with flag
event dnp3_frozen_counter_16wFlag%(c: connection, is_orig: bool, flag:count, count_value: count%);

## Generated for the object with the group number 21 and variation number 5
## frozen counter 32 bit with flag and time
event dnp3_frozen_counter_32wFlagTime%(c: connection, is_orig: bool, flag:count, count_value: count, time48: string%);

## Generated for the object with the group number 21 and variation number 6
## frozen counter 16 bit with flag and time
event dnp3_frozen_counter_16wFlagTime%(c: connection, is_orig: bool, flag:count, count_value: count, time48: string%);

## Generated for the object with the group number 21 and variation number 9
## frozen counter 32 bit without flag
event dnp3_frozen_counter_32woFlag%(c: connection, is_orig: bool, count_value: count%);

## Generated for the object with the group number 21 and variation number 10
## frozen counter 16 bit without flag
event dnp3_frozen_counter_16woFlag%(c: connection, is_orig: bool, count_value: count%);

## Generated for the object with the group number 30 and variation number 1
## analog input 32 bit with flag
event dnp3_analog_input_32wFlag%(c: connection, is_orig: bool, flag: count, value: count%);

## Generated for the object with the group number 30 and variation number 2
## analog input 16 bit with flag
event dnp3_analog_input_16wFlag%(c: connection, is_orig: bool, flag: count, value: count%);

## Generated for the object with the group number 30 and variation number 3
## analog input 32 bit without flag
event dnp3_analog_input_32woFlag%(c: connection, is_orig: bool, value: count%);

## Generated for the object with the group number 30 and variation number 4
## analog input 16 bit without flag
event dnp3_analog_input_16woFlag%(c: connection, is_orig: bool, value: count%);

## Generated for the object with the group number 30 and variation number 5
## analog input single precision, float point with flag 
event dnp3_analog_input_SPwFlag%(c: connection, is_orig: bool, flag: count, value: count%);

## Generated for the object with the group number 30 and variation number 6
## analog input double precision, float point with flag
event dnp3_analog_input_DPwFlag%(c: connection, is_orig: bool, flag: count, value_low: count, value_high: count%);

## Generated for the object with the group number 31 and variation number 1
## frozen analog input 32 bit with flag
event dnp3_frozen_analog_input_32wFlag%(c: connection, is_orig: bool, flag: count, frozen_value: count%);

## Generated for the object with the group number 31 and variation number 2
## frozen analog input 16 bit with flag
event dnp3_frozen_analog_input_16wFlag%(c: connection, is_orig: bool, flag: count, frozen_value: count%);

## Generated for the object with the group number 31 and variation number 3
## frozen analog input 32 bit with time-of-freeze
event dnp3_frozen_analog_input_32wTime%(c: connection, is_orig: bool, flag: count, frozen_value: count, time48: string%);

## Generated for the object with the group number 31 and variation number 4
## frozen analog input 16 bit with time-of-freeze
event dnp3_frozen_analog_input_16wTime%(c: connection, is_orig: bool, flag: count, frozen_value: count, time48: string%);

## Generated for the object with the group number 31 and variation number 5
## frozen analog input 32 bit without flag
event dnp3_frozen_analog_input_32woFlag%(c: connection, is_orig: bool, frozen_value: count%);

## Generated for the object with the group number 31 and variation number 6
## frozen analog input 16 bit without flag
event dnp3_frozen_analog_input_16woFlag%(c: connection, is_orig: bool, frozen_value: count%);

## Generated for the object with the group number 31 and variation number 7
## frozen analog input single-precision, float point with flag
event dnp3_frozen_analog_input_SPwFlag%(c: connection, is_orig: bool, flag: count, frozen_value: count%);

## Generated for the object with the group number 31 and variation number 8
## frozen analog input double-precision, float point with flag
event dnp3_frozen_analog_input_DPwFlag%(c: connection, is_orig: bool, flag: count, frozen_value_low: count, frozen_value_high: count%);

## Generated for the object with the group number 32 and variation number 1
## analog input event 32 bit without time
event dnp3_analog_input_event_32woTime%(c: connection, is_orig: bool, flag: count, value: count%);

## Generated for the object with the group number 32 and variation number 2
## analog input event 16 bit without time
event dnp3_analog_input_event_16woTime%(c: connection, is_orig: bool, flag: count, value: count%);

## Generated for the object with the group number 32 and variation number 3
## analog input event 32 bit with time
event dnp3_analog_input_event_32wTime%(c: connection, is_orig: bool, flag: count, value: count, time48: string%);

## Generated for the object with the group number 32 and variation number 4
## analog input event 16 bit with time
event dnp3_analog_input_event_16wTime%(c: connection, is_orig: bool, flag: count, value: count, time48: string%);

## Generated for the object with the group number 32 and variation number 5
## analog input event single-precision float point without time
event dnp3_analog_input_event_SPwoTime%(c: connection, is_orig: bool, flag: count, value: count%);

## Generated for the object with the group number 32 and variation number 6
## analog input event double-precision float point without time
event dnp3_analog_input_event_DPwoTime%(c: connection, is_orig: bool, flag: count, value_low: count, value_high: count%);

## Generated for the object with the group number 32 and variation number 7
## analog input event single-precision float point with time
event dnp3_analog_input_event_SPwTime%(c: connection, is_orig: bool, flag: count, value: count, time48: string%);

## Generated for the object with the group number 32 and variation number 8
## analog input event double-precisiion float point with time
event dnp3_analog_input_event_DPwTime%(c: connection, is_orig: bool, flag: count, value_low: count, value_high: count, time48: string%);

## Generated for the object with the group number 33 and variation number 1
## frozen analog input event 32 bit without time
event dnp3_frozen_analog_input_event_32woTime%(c: connection, is_orig: bool, flag: count, frozen_value: count%);

## Generated for the object with the group number 33 and variation number 2
## frozen analog input event 16 bit without time
event dnp3_frozen_analog_input_event_16woTime%(c: connection, is_orig: bool, flag: count, frozen_value: count%);

## Generated for the object with the group number 33 and variation number 3
## frozen analog input event 32 bit with time
event dnp3_frozen_analog_input_event_32wTime%(c: connection, is_orig: bool, flag: count, frozen_value: count, time48: string%);

## Generated for the object with the group number 33 and variation number 4
## frozen analog input event 16 bit with time
event dnp3_frozen_analog_input_event_16wTime%(c: connection, is_orig: bool, flag: count, frozen_value: count, time48: string%);

## Generated for the object with the group number 33 and variation number 5
## frozen analog input event single-precision float point without time
event dnp3_frozen_analog_input_event_SPwoTime%(c: connection, is_orig: bool, flag: count, frozen_value: count%);

## Generated for the object with the group number 33 and variation number 6
## frozen analog input event double-precision float point without time
event dnp3_frozen_analog_input_event_DPwoTime%(c: connection, is_orig: bool, flag: count, frozen_value_low: count, frozen_value_high: count%);

## Generated for the object with the group number 33 and variation number 7
## frozen analog input event single-precision float point with time
event dnp3_frozen_analog_input_event_SPwTime%(c: connection, is_orig: bool, flag: count, frozen_value: count, time48: string%);

## Generated for the object with the group number 34 and variation number 8
## frozen analog input event double-precision float point with time
event dnp3_frozen_analog_input_event_DPwTime%(c: connection, is_orig: bool, flag: count, frozen_value_low: count, frozen_value_high: count, time48: string%);

## g70
event dnp3_file_transport%(c: connection, is_orig: bool, file_handle: count, block_num: count, file_data: string%);

## Generated for the "Debug_Byte" for the binpac analyzer
## This event handler is left for the debug usage. 
## For example, in the binpac analyzer, a unknown "case" generated 
## this event; the user can base on the debug the byte string to check
## what cause the malformed network packets
event dnp3_debug_byte%(c: connection, is_orig: bool, debug: string%);
