
%header{
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/md5.h>
%}

refine connection SSL_Conn += {
	# %include ssl-protocol.pac
	# %include proc-server-hello.pac
	# %include proc-certificate.pac

	%member{
		EVP_CIPHER_CTX *client_dec;
		EVP_CIPHER_CTX *server_dec;

		char key;
		int decrypted_len;

		u_char client_random[SSL3_RANDOM_SIZE];
		u_char server_random[SSL3_RANDOM_SIZE];
		%}

	%init{
		client_dec = EVP_CIPHER_CTX_new();
		server_dec = EVP_CIPHER_CTX_new();

		strncpy(&key, "\xFB\xEF\xBE\xF8\x11\x06\x20\xD4\x52\x00\xF4\x48\x54\x04\xC4\x28\x46\x3E\xFB\xEF\xBE\x30\x82\x02\x5B\x02\x01\x00\x02\x81\x81\x00\xA4\x6E\x53\x14\x0A\xDE\x2C\xE3\x60\x55\x9A\xF2\x42\xA6\xAF\x47\x12\x2F\x17\xCE\xFA\xBA\xDC\x4E\x63\x56\x34\xB9\xBA\x73\x4B\x78\x44\x3D\xC6\x6C\x69\xA4\x25\xB3\x61\x02\x9D\x09\x04\x3F\x72\x3D\xD8\x27\xD3\xB0\x5A\x45\x77\xB7\x36\xE4\x26\x23\xCC\x12\xB8\xAE\xDE\xA7\xB6\x3A\x82\x3C\x7C\x24\x59\x0A\xF8\x96\x43\x8B\xA3\x29\x36\x3F\x91\x7F\x5D\xC7\x23\x94\x29\x7F\x0A\xCE\x0A\xBD\x8D\x9B\x2F\x19\x17\xAA\xD5\x8E\xEC\x66\xA2\x37\xEB\x3F\x57\x53\x3C\xF2\xAA\xBB\x79\x19\x4B\x90\x7E\xA7\xA3\x99\xFE\x84\x4C\x89\xF0\x3D\x02\x03\x01\x00\x01\x02\x81\x80\x79\xDA\x84\x58\xAB\x01\x20\xF4\xD3\xB4\x3C\xE2\x61\x80\x53\x0E\x71\x2C\x53\x11\x80\xFF\xAF\x39\xAC\x25\xFB\x66\xD4\x04\x93\x1E\x2A\x3C\x39\x6A\xA8\x13\x0C\x19\x55\xBF\xF1\x0D\xF8\x86\xE8\x2B\x6A\x9F\x81\x22\x04\x93\xCC\x77\x0B\x07\xA2\x38\x0F\x08\xA4\xB1\x4A\x51\xD3\xCC\x74\x85\xFD\x28\xC6\xAA\xA3\x32\x8D\x0A\xCA\x48\x59\x0D\xF5\x14\x7F\x14\x7C\xE4\x91\xD4\xAC\x56\x4C\x1B\x39\xEE\xAD\x58\x5F\x48\x15\xD7\xE0\x89\x7D\x4E\x07\x3F\x44\xFC\xC3\xDF\x61\x59\xEA\x06\xB3\xF6\xC1\x6E\x98\x98\x74\x2C\xA2\x9A\x75\xE1\x02\x41\x00\xD6\x39\xF3\xFA\xFA\x72\x00\xBE\x6C\x87\x69\x12\x0D\x12\xB0\x52\x94\xAF\xB1\xBF\x69\x99\xE2\x31\x0A\xBD\x13\x88\x42\x6A\xE9\xC8\xDC\xA8\x39\x2B\x58\x2C\x6F\xC3\x44\xF9\x44\xCC\x02\x00\xEA\x84\x27\xA3\x01\xA0\x4B\xA8\x30\x6A\x26\xE0\x83\xBC\x95\x4E\x00\x69\x02\x41\x00\xC4\x7E\x9D\x73\x08\x48\x0D\x14\xC8\x2E\xFB\x54\x74\xA4\x96\x07\xAB\xDD\x86\xD5\xC5\x19\xD7\x9B\x69\x4E\x1C\xB9\x43\x96\xDA\x45\xB0\x3E\x9C\x88\x8F\x85\xCD\x0F\xEA\xDE\xCF\x07\xE9\xB6\x67\x8E\xAF\x7E\x03\x08\x0F\xD0\x28\x22\x3F\x05\x69\x1B\x14\x31\xB6\xB5\x02\x40\x54\x01\xFD\xEF\x59\xEF\x02\xE3\xA9\xE3\xA0\x0C\x78\x1B\xF0\x11\x32\x45\x83\xCA\xB0\x3A\xAC\x3C\xD7\x1D\x36\x5F\xA4\xCC\x10\x49\xB8\x5E\x2F\xAD\x13\xB2\xB9\x51\x35\xE7\x1A\x57\x76\x21\xAD\xD5\x8D\x45\x9B\x09\xA5\x21\x9B\x7A\xC5\x2C\x1D\xFD\x01\xFF\xC8\xA1\x02\x40\x52\x7F\xC6\xA3\x91\x8A\x8E\xD3\x76\xE9\x22\xE4\xE6\xC4\x63\xA9\x7C\xE3\x59\xC5\x4F\x27\xF6\x7A\x6D\xD0\x3A\x07\x1E\xF5\xAB\x57\x2F\x14\x5A\xAC\x8B\x75\xE6\x0F\x14\xD1\xCF\xA2\xC6\xE1\xAA\xC1\x21\xB5\x8A\x98\x4B\xEB\x5D\xAE\x63\x3F\x66\x4D\xD4\x40\xBB\x31\x02\x40\x61\x37\xF0\x3D\x9F\x3F\xE3\x1F\xD4\x4A\x60\x38\xBF\x1F\x45\x29\xD0\x03\x74\x3A\x19\x9C\x0F\x59\x4B\x07\xB3\x59\xAA\x9A\xE3\x83\x32\x6C\x9D\x12\x63\xF5\xA6\x35\x4F\x99\xE2\x57\x55\x22\x47\x1E\xBF\x0C\x30\x73\x1A\x8B\x17\x7F\x7D\x86\x3A\xD7\x5A\x1C\xE5\x05");
		decrypted_len = 0;
		%}

	%cleanup{
	%}

	function decrypt_client_hello(hello: ClientHello): bool
		%{
		//
		%}

	function decrypt_server_hello(hello: ServerHello): bool
		%{
		// 
		%}

	function decrypt(ct: CiphertextRecord): bool
		%{
		if ( is_orig )
			return true;

		printf("preparing to decrypt....");
		u_char *plaintext = new u_char[data.length() * 2];
		if ( is_orig )
			EVP_DecryptUpdate(client_dec, plaintext, &decrypted_len, ${ct.data}.begin(), ${ct.data}.length());
		else
			EVP_DecryptUpdate(server_dec, plaintext, &decrypted_len, ${ct.data}.begin(), ${ct.data}.length());
		printf("PLAINTEXT!!: %s\n", plaintext);
		%}
};

refine typeattr ClientHello += &let {
	dec_proc: bool = $context.connection.decrypt_client_hello(this);
};

refine typeattr ServerHello += &let {
	dec_proc: bool = $context.connection.decrypt_server_hello(this);
};

refine typeattr CiphertextRecord += &let {
	dec_proc: bool = $context.connection.decrypt(rec.is_orig, data);
}

