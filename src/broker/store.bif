
##! Functions to interface with broker's distributed data store.

%%{
#include "broker/Manager.h"
#include "broker/Store.h"
#include "broker/Data.h"
#include "Trigger.h"
%%}

module Broker;

type Broker::QueryResult: record;

type Broker::BackendOptions: record;

## Enumerates the possible storage backends.
enum BackendType %{
	MEMORY,
	SQLITE,
	ROCKSDB,
%}

function Broker::__create_master%(id: string, b: BackendType,
                               options: BackendOptions &default = BackendOptions()%): opaque of Broker::Store
	%{
	auto name = id->CheckString();
	auto rval = broker_mgr->LookupStore(name);
	if ( rval )
		return rval;

	auto e = static_cast<BifEnum::Broker::BackendType>(b->AsEnum());
	auto type = bro_broker::to_backend_type(e);
	auto opts = bro_broker::to_backend_options(type, options->AsRecordVal());

	auto store = broker_mgr->MakeMaster(name, type, std::move(opts));
	if ( ! store )
		{
		reporter->Error("Could not create Broker master store '%s'", name);
		return nullptr;
		}

	return store;
	%}

function Broker::__create_clone%(id: string%): opaque of Broker::Store
	%{
	auto name = id->CheckString();
	auto rval = broker_mgr->LookupStore(name);
	if ( rval )
		return rval;

	auto store = broker_mgr->MakeClone(name);
	if ( ! store )
		{
		reporter->Error("Could not create clone of Broker store '%s'", name);
		return nullptr;
		}

	return store;
	%}

function Broker::__close%(h: opaque of Broker::Store%): bool
	%{
	if ( ! h )
		{
		reporter->Error("invalid Broker store handle");
		return new Val(false, TYPE_BOOL);
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);
	return new Val(broker_mgr->CloseStore(handle->store.name()), TYPE_BOOL);
	%}

function Broker::__get%(h: opaque of Broker::Store,
			k: any%): Broker::QueryResult
	%{
	if ( ! h )
		{
		reporter->Error("invalid Broker store handle");
		return new Val(false, TYPE_BOOL);
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);

	auto key = bro_broker::make_data_val(k)->Lookup(0);
	if ( ! key )
		return bro_broker::query_result();

	auto trigger = frame->GetTrigger();
	if ( ! trigger )
		{
		reporter->PushLocation(frame->GetCall()->GetLocationInfo());
		reporter->Error("Broker queries can only be called inside when-condition");
		reporter->PopLocation();
		return bro_broker::query_result();
		}

	auto timeout = trigger->TimeoutValue();
	if ( timeout < 0 )
		{
		reporter->PushLocation(frame->GetCall()->GetLocationInfo());
		reporter->Error("Broker queries must specify a timeout block");
		reporter->PopLocation();
		return bro_broker::query_result();
		}

	frame->SetDelayed();
	trigger->Hold();

	auto cb = new bro_broker::StoreQueryCallback(trigger, frame->GetCall(),
                                               handle->store);
	auto req_id = handle->proxy.get(static_cast<bro_broker::DataVal*>(key)->data);
	broker_mgr->TrackStoreQuery(req_id, cb);

	return 0;
	%}

function Broker::__put%(h: opaque of Broker::Store,
                        k: any, v: any%): bool
	%{
	if ( ! h )
		{
		reporter->Error("invalid Broker store handle");
		return new Val(false, TYPE_BOOL);
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);

	auto& key = bro_broker::opaque_field_to_data(bro_broker::make_data_val(k), frame);
	auto& val = bro_broker::opaque_field_to_data(bro_broker::make_data_val(v), frame);

	handle->store.put(key, val);
	return new Val(true, TYPE_BOOL);
	%}

function Broker::__erase%(h: opaque of Broker::Store, k: any%): bool
	%{
	if ( ! h )
		{
		reporter->Error("invalid Broker store handle");
		return new Val(false, TYPE_BOOL);
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);

	auto& key = bro_broker::opaque_field_to_data(bro_broker::make_data_val(k), frame);
	handle->store.erase(key);
	return new Val(true, TYPE_BOOL);
	%}

function Broker::__add%(h: opaque of Broker::Store, k: any, b: any%): bool
	%{
	if ( ! h )
		{
		reporter->Error("invalid Broker store handle");
		return new Val(false, TYPE_BOOL);
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);

	auto& key = bro_broker::opaque_field_to_data(bro_broker::make_data_val(k), frame);
	auto& by = bro_broker::opaque_field_to_data(bro_broker::make_data_val(b), frame);
	handle->store.add(key, by);
	return new Val(true, TYPE_BOOL);
	%}

function Broker::__subtract%(h: opaque of Broker::Store, k: any, b: any%): bool
	%{
	if ( ! h )
		{
		reporter->Error("invalid Broker store handle");
		return new Val(false, TYPE_BOOL);
		}

	auto handle = static_cast<bro_broker::StoreHandleVal*>(h);

	auto& key = bro_broker::opaque_field_to_data(bro_broker::make_data_val(k), frame);
	auto& by = bro_broker::opaque_field_to_data(bro_broker::make_data_val(b), frame);
	handle->store.subtract(key, by);
	return new Val(true, TYPE_BOOL);
	%}


