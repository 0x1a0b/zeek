
##! Functions and events regarding Bro's broker communication mechanisms.

%%{
#include "broker/Manager.h"
%%}

module Broker;

function Broker::__enable%(%): bool
	%{
	return new Val(broker_mgr->Enable(), TYPE_BOOL);
	%}

## Generated when something changes in the Broker system.
event Broker::status%(todo: string%);

## Generated when something changes in the Broker system.
event Broker::error%(todo: string%);

function Broker::__listen%(p: port, a: string%): port
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("listen port must use tcp");
    return new PortVal(0, TRANSPORT_UNKNOWN);
		}

	auto rval = broker_mgr->Listen(a->Len() ? a->CheckString() : "", p->Port());
  return new PortVal(rval, TRANSPORT_TCP);
	%}

function Broker::__peer%(a: string, p: port%): bool
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("remote connection port must use tcp");
		return new Val(false, TYPE_BOOL);
		}

	broker_mgr->Peer(a->CheckString(), p->Port());
	return new Val(true, TYPE_BOOL);
	%}

function Broker::__unpeer%(a: string, p: port%): bool
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("remote connection port must use tcp");
		return new Val(false, TYPE_BOOL);
		}

	broker_mgr->Unpeer(a->CheckString(), p->Port());
	return new Val(true, TYPE_BOOL);
	%}
