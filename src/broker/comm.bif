
##! Functions and events regarding Bro's broker communication mechanisms.

%%{
#include "broker/Manager.h"
%%}

module Broker;

type Broker::Options: record;

## Generated when something changes in the Broker sub-system.
event Broker::status%(endpoint: EndpointInfo, msg: string%);

## Generated when a new peering has been established.
event Broker::peer_added%(endpoint: EndpointInfo, msg: string%);

## Generated when an existing peer has been removed.
event Broker::peer_removed%(endpoint: EndpointInfo, msg: string%);

## Generated when an existing peering has been lost.
event Broker::peer_lost%(endpoint: EndpointInfo, msg: string%);

## Generated when a lost peering has been recovered.
event Broker::peer_recovered%(endpoint: EndpointInfo, msg: string%);

## Generated when an error occurs in the Broker sub-system.
event Broker::error%(code: ErrorCode, msg: string%);

function Broker::__enable%(options: Broker::Options%): bool
	%{
	auto name = "";
	auto routable = false;

	if ( auto name_val = options->AsRecordVal()->Lookup(0) )
		name = name_val->AsString()->CheckString();

	if ( auto routable_val = options->AsRecordVal()->Lookup(1) )
		routable = routable_val->AsBool();

	return new Val(broker_mgr->Enable(name, routable), TYPE_BOOL);
	%}

function Broker::__listen%(p: port, a: string%): port
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("listen port must use tcp");
    return new PortVal(0, TRANSPORT_UNKNOWN);
		}

	auto rval = broker_mgr->Listen(a->Len() ? a->CheckString() : "", p->Port());
  return new PortVal(rval, TRANSPORT_TCP);
	%}

function Broker::__peer%(a: string, p: port%): bool
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("remote connection port must use tcp");
		return new Val(false, TYPE_BOOL);
		}

	broker_mgr->Peer(a->CheckString(), p->Port());
	return new Val(true, TYPE_BOOL);
	%}

function Broker::__unpeer%(a: string, p: port%): bool
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("remote connection port must use tcp");
		return new Val(false, TYPE_BOOL);
		}

	broker_mgr->Unpeer(a->CheckString(), p->Port());
	return new Val(true, TYPE_BOOL);
	%}
