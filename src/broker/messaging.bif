
##! Functions for peering and various messaging patterns.

%%{
#include "broker/Manager.h"
#include "logging/Manager.h"
%%}

module Broker;

type Broker::Event: record;

## Create a data structure that may be used to send a remote event via
## :bro:see:`Broker::publish`.
##
## args: an event, followed by a list of argument values that may be used
##       to call it.
##
## Returns: opaque communication data that may be used to send a remote
##          event.
function Broker::make_event%(...%): Broker::Event
	%{
	auto rval = broker_mgr->MakeEvent(@ARGS@);
	return rval;
	%}

function Broker::__publish%(topic: string, ev: Broker::Event%): bool
	%{
	auto rval = broker_mgr->PublishEvent(topic->CheckString(), ev->AsRecordVal());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__auto_publish%(topic: string, ev: any%): bool
	%{
	auto rval = broker_mgr->AutoPublishEvent(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__auto_unpublish%(topic: string, ev: any%): bool
	%{
	auto rval = broker_mgr->AutoUnpublishEvent(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__subscribe%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->Subscribe(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__unsubscribe%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->Unsubscribe(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}
