
##! Functions for peering and various messaging patterns (e.g. print/log/event).

%%{
#include "broker/Manager.h"
#include "logging/Manager.h"
%%}

module BrokerComm;

type BrokerComm::SendFlags: record;

type BrokerComm::EventArgs: record;

## Used to handle remote print messages from peers that call
## :bro:see:`BrokerComm::send_print`.
event BrokerComm::print_handler%(msg: string%);

function BrokerComm::__print%(topic: string, msg: string, flags: BrokerComm::SendFlags%): bool
	%{
	auto rval = broker_mgr->Print(topic->CheckString(), msg->CheckString(),
	                            flags);
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__subscribe_to_prints%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->SubscribeToPrints(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__unsubscribe_to_prints%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->UnsubscribeToPrints(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

## Create a data structure that may be used to send a remote event via
## :bro:see:`BrokerComm::event`.
##
## args: an event, followed by a list of argument values that may be used
##       to call it.
##
## Returns: opaque communication data that may be used to send a remote
##          event.
function BrokerComm::event_args%(...%): BrokerComm::EventArgs
	%{
	auto rval = broker_mgr->MakeEventArgs(@ARGS@);
	return rval;
	%}

function BrokerComm::__event%(topic: string, args: BrokerComm::EventArgs, flags: BrokerComm::SendFlags%): bool
	%{
	auto rval = broker_mgr->Event(topic->CheckString(), args->AsRecordVal(),
	                            flags);
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__auto_event%(topic: string, ev: any, flags: BrokerComm::SendFlags%): bool
	%{
	auto rval = broker_mgr->AutoEvent(topic->CheckString(), ev, flags);
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__auto_event_stop%(topic: string, ev: any%): bool
	%{
	auto rval = broker_mgr->AutoEventStop(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__subscribe_to_events%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->SubscribeToEvents(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__unsubscribe_to_events%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->UnsubscribeToEvents(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__enable_remote_logs%(id: Log::ID, flags: BrokerComm::SendFlags%): bool
	%{
	auto rval = log_mgr->EnableRemoteLogs(id->AsEnumVal(),
	                                   bro_broker::Manager::send_flags_to_int(flags));
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__disable_remote_logs%(id: Log::ID%): bool
	%{
	auto rval = log_mgr->DisableRemoteLogs(id->AsEnumVal());
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__remote_logs_enabled%(id: Log::ID%): bool
	%{
	auto rval = log_mgr->RemoteLogsAreEnabled(id->AsEnumVal());
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__subscribe_to_logs%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->SubscribeToLogs(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function BrokerComm::__unsubscribe_to_logs%(topic_prefix: string%): bool
	%{
	auto rval = broker_mgr->UnsubscribeToLogs(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}
