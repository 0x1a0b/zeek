# Templates used to generate virtual functions, opcodes, and evaluation
# code for compiled code.

unary-expr-op Assign
eval $1

unary-expr-op Clone
eval AS_ValUnion($1.ToVal(s.t)->Clone().release(), s.t)

unary-expr-op Not
op-type I
eval ! $1

unary-expr-op Complement
op-type U
eval ~ $1

unary-expr-op Positive
op-type I D
vector
eval $1

unary-expr-op Negate
op-type I D
vector
eval -$1

binary-expr-op Add
op-type I U D S
vector
eval $1+$2
eval_S vector<const BroString*> strings
eval_S strings.push_back($1)
eval_S strings.push_back($2)
eval_S $$ = concatenate(strings)

binary-expr-op Sub
op-type I U D T
vector
eval $1-$2
eval_T $$ = $1->Clone()->AsTableVal()
eval_T $2->RemoveFrom($$)

binary-expr-op Times
op-type I U D
vector
eval $1*$2

binary-expr-op Divide
op-type I U D
vector
eval-pre if ( $2 == 0 ) run_time_error("division by zero")
eval $1/$2

########################################

unary-op AppendTo
eval auto vv = frame[s.v1].vector_val
eval vv->Assign(vv->Size(), $1.ToVal(s.t))

########################################

op Return
type X
eval ret_u = nullptr
eval loop = false
method-pre	SyncGlobals()

op Return
type V
eval ret_u = &frame[s.v1]
eval ret_type = s.t
eval loop = false
method-pre	SyncGlobals()

op Return
type C
eval ret_u = &s.c
eval ret_type = s.t
eval loop = false
method-pre	SyncGlobals()

########################################

op Print
type O
eval auto vvec = frame[s.v1].vvec
eval do_print(*vvec)
eval delete vvec
method-pre int reg = v->n; delete v

########################################
# Internal
########################################

# Initializes a new value vector.  We now do this dynamically, but at same
# point we could switch it to a static vector since we'll only have one of
# these at at time.
# 
# v1 is where to store the vector, v2 is its size (which we don't presently
# use).

internal-op Create-Val-Vec
type VV
eval frame[s.v1].vvec = new val_vec

# Appends v2 to the vector pointed to by v1.
internal-op Set-Val-Vec
type VV
eval auto v = frame[s.v2].ToVal(s.t)
eval frame[s.v1].vvec->push_back(v)

# Appends c to the vector pointed to by v1.
internal-op Set-Val-Vec
type VC
eval auto c = s.c.ToVal(s.t)
eval frame[s.v1].vvec->push_back(c)

# EXPR_MOD
# EXPR_AND
# EXPR_OR
# EXPR_XOR
# EXPR_LT
# EXPR_LE
# EXPR_EQ
# EXPR_NE
# EXPR_GE
# EXPR_GT

# EXPR_COND

# EXPR_INDEX
# EXPR_ANY_INDEX
# EXPR_FIELD
# EXPR_HAS_FIELD
# EXPR_RECORD_CONSTRUCTOR
# EXPR_TABLE_CONSTRUCTOR
# EXPR_SET_CONSTRUCTOR
# EXPR_VECTOR_CONSTRUCTOR
# EXPR_IN
# EXPR_CALL
# EXPR_LAMBDA
# EXPR_ARITH_COERCE
# EXPR_RECORD_COERCE
# EXPR_TABLE_COERCE
# EXPR_VECTOR_COERCE

# EXPR_SIZE

# EXPR_FLATTEN
# EXPR_CAST
# EXPR_IS
