# Templates used to generate virtual functions, opcodes, and evaluation
# code for compiled code.

expr-op Assign
type VC
eval frame[s.v1] = s.c

expr-op Assign
type VV
eval frame[s.v1] = frame[s.v2]

########################################

op AppendTo
type VV
eval auto vv = frame[s.v1].vector_val; vv->Assign(vv->Size(), frame[s.v2].ToVal(s.t))

op AppendTo
type VC
eval auto vv = frame[s.v1].vector_val; auto c = s.c.ToVal(s.t); vv->Assign(vv->Size(), c)

########################################

op Return
type X
eval ret_u = nullptr; loop = false
method-pre	SyncGlobals()

op Return
type V
eval ret_u = &frame[s.v1]; ret_type = s.t; loop = false
method-pre	SyncGlobals()

op Return
type C
eval ret_u = &s.c; ret_type = s.t; loop = false
method-pre	SyncGlobals()

########################################

op Print
type O
eval { auto vvec = frame[s.v1].vvec; do_print(*vvec); delete vvec; break; }
method-pre int reg = v->n; delete v
