# Templates used to generate virtual functions, opcodes, and evaluation
# code for compiled code.

expr-op Assign
type VC
eval frame[s.v1] = s.c

expr-op Assign
type VV
eval frame[s.v1] = frame[s.v2]

########################################

expr-op Clone
type VV
eval auto v = frame[s.v2].ToVal(s.t)
eval frame[s.v1] = AS_ValUnion(v->Clone().release(), s.t)

expr-op Clone
type VC
eval auto c = s.c.ToVal(s.t)
eval frame[s.v1] = AS_ValUnion(c->Clone().release(), s.t)

########################################

op AppendTo
type VV
eval auto vv = frame[s.v1].vector_val
eval vv->Assign(vv->Size(), frame[s.v2].ToVal(s.t))

op AppendTo
type VC
eval auto vv = frame[s.v1].vector_val
eval auto c = s.c.ToVal(s.t)
eval vv->Assign(vv->Size(), c)

########################################

op Return
type X
eval ret_u = nullptr
eval loop = false
method-pre	SyncGlobals()

op Return
type V
eval ret_u = &frame[s.v1]
eval ret_type = s.t
eval loop = false
method-pre	SyncGlobals()

op Return
type C
eval ret_u = &s.c
eval ret_type = s.t
eval loop = false
method-pre	SyncGlobals()

########################################

op Print
type O
eval auto vvec = frame[s.v1].vvec
eval do_print(*vvec)
eval delete vvec
method-pre int reg = v->n; delete v

########################################
# Internal
########################################

# Initializes a new value vector.  We now do this dynamically, but at same
# point we could switch it to a static vector since we'll only have one of
# these at at time.
# 
# v1 is where to store the vector, v2 is its size (which we don't presently
# use).

internal-op Create-Val-Vec
type VV
eval frame[s.v1].vvec = new val_vec

# Appends v2 to the vector pointed to by v1.
internal-op Set-Val-Vec
type VV
eval auto v = frame[s.v2].ToVal(s.t)
eval frame[s.v1].vvec->push_back(v)

# Appends c to the vector pointed to by v1.
internal-op Set-Val-Vec
type VC
eval auto c = s.c.ToVal(s.t)
eval frame[s.v1].vvec->push_back(c)

# EXPR_CLONE
# EXPR_NOT
# EXPR_COMPLEMENT
# EXPR_POSITIVE
# EXPR_NEGATE
# EXPR_ADD
# EXPR_SUB
# EXPR_APPEND_TO
# EXPR_TIMES
# EXPR_DIVIDE
# EXPR_MOD
# EXPR_AND
# EXPR_OR
# EXPR_XOR
# EXPR_LT
# EXPR_LE
# EXPR_EQ
# EXPR_NE
# EXPR_GE
# EXPR_GT
# EXPR_COND
# EXPR_INDEX
# EXPR_ANY_INDEX
# EXPR_FIELD
# EXPR_HAS_FIELD
# EXPR_RECORD_CONSTRUCTOR
# EXPR_TABLE_CONSTRUCTOR
# EXPR_SET_CONSTRUCTOR
# EXPR_VECTOR_CONSTRUCTOR
# EXPR_IN
# EXPR_CALL
# EXPR_LAMBDA
# EXPR_ARITH_COERCE
# EXPR_RECORD_COERCE
# EXPR_TABLE_COERCE
# EXPR_VECTOR_COERCE
# EXPR_SIZE
# EXPR_FLATTEN
# EXPR_CAST
# EXPR_IS
