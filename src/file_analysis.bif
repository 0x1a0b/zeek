##! Internal functions and types used by the logging framework.

module FileAnalysis;

%%{
#include "file_analysis/Manager.h"
%%}

## :bro:see:`FileAnalysis::postpone_timeout`.
function FileAnalysis::__postpone_timeout%(file_id: string%): bool
	%{
	using file_analysis::FileID;
	bool result = file_mgr->PostponeTimeout(FileID(file_id->CheckString()));
	return new Val(result, TYPE_BOOL);
	%}

## :bro:see:`FileAnalysis::add_action`.
function FileAnalysis::__add_action%(file_id: string, args: any%): bool
	%{
	using file_analysis::FileID;
	using BifType::Record::FileAnalysis::ActionArgs;
	RecordVal* rv = args->AsRecordVal()->CoerceTo(ActionArgs);
	bool result = file_mgr->AddAction(FileID(file_id->CheckString()), rv);
	Unref(rv);
	return new Val(result, TYPE_BOOL);
	%}

## :bro:see:`FileAnalysis::remove_action`.
function FileAnalysis::__remove_action%(file_id: string, args: any%): bool
	%{
	using file_analysis::FileID;
	using BifType::Record::FileAnalysis::ActionArgs;
	RecordVal* rv = args->AsRecordVal()->CoerceTo(ActionArgs);
	bool result = file_mgr->RemoveAction(FileID(file_id->CheckString()), rv);
	Unref(rv);
	return new Val(result, TYPE_BOOL);
	%}

## :bro:see:`FileAnalysis::stop`.
function FileAnalysis::__stop%(file_id: string%): bool
	%{
	using file_analysis::FileID;
	bool result = file_mgr->IgnoreFile(FileID(file_id->CheckString()));
	return new Val(result, TYPE_BOOL);
	%}

## :bro:see:`FileAnalysis::data_stream`.
function FileAnalysis::__data_stream%(source: string, data: string%): any
	%{
	file_mgr->DataIn(data->Bytes(), data->Len(), source->CheckString());
	return 0;
	%}

## :bro:see:`FileAnalysis::data_chunk`.
function FileAnalysis::__data_chunk%(source: string, data: string,
                                     offset: count%): any
	%{
	file_mgr->DataIn(data->Bytes(), data->Len(), offset, source->CheckString());
	return 0;
	%}

## :bro:see:`FileAnalysis::gap`.
function FileAnalysis::__gap%(source: string, offset: count, len: count%): any
	%{
	file_mgr->Gap(offset, len, source->CheckString());
	return 0;
	%}

## :bro:see:`FileAnalysis::set_size`.
function FileAnalysis::__set_size%(source: string, size: count%): any
	%{
	file_mgr->SetSize(size, source->CheckString());
	return 0;
	%}

## :bro:see:`FileAnalysis::eof`.
function FileAnalysis::__eof%(source: string%): any
	%{
	file_mgr->EndOfFile(source->CheckString());
	return 0;
	%}

module GLOBAL;

## For use within a :bro:see:`get_file_handle` handler to return a unique
## identifier to associate with some buffered input to the file analysis
## framework.  The buffered data will then immediately be allowed to pass
## pass through the file analysis framework and execute any policy hooks
## that are available.  If an empty string is returned, that signifies that
## the buffered data will be discarded with no further action taken on it.
##
## handle: A string that uniquely identifies a file.
##
## .. bro:see:: get_file_handle FileAnalysis::policy
function set_file_handle%(handle: string%): any
	%{
	file_mgr->SetHandle(handle->CheckString());
	return 0;
	%}

# Define file analysis framework events.

#event FileAnalysis::windows_pe_dosstub%(fi: FileAnalysis::Info, sig: string, checksum: count%);
event FileAnalysis::windows_pe_dosstub%(checksum: count%);
event FileAnalysis::windows_pe_timestamp%(ts: time%);

