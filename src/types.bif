
enum dce_rpc_ptype %{
	DCE_RPC_REQUEST,
	DCE_RPC_PING,
	DCE_RPC_RESPONSE,
	DCE_RPC_FAULT,
	DCE_RPC_WORKING,
	DCE_RPC_NOCALL,
	DCE_RPC_REJECT,
	DCE_RPC_ACK,
	DCE_RPC_CL_CANCEL,
	DCE_RPC_FACK,
	DCE_RPC_CANCEL_ACK,
	DCE_RPC_BIND,
	DCE_RPC_BIND_ACK,
	DCE_RPC_BIND_NAK,
	DCE_RPC_ALTER_CONTEXT,
	DCE_RPC_ALTER_CONTEXT_RESP,
	DCE_RPC_SHUTDOWN,
	DCE_RPC_CO_CANCEL,
	DCE_RPC_ORPHANED,
%}

enum dce_rpc_if_id %{
	DCE_RPC_unknown_if,
	DCE_RPC_epmapper,
	DCE_RPC_lsarpc,
	DCE_RPC_lsa_ds,
	DCE_RPC_mgmt,
	DCE_RPC_netlogon,
	DCE_RPC_samr,
	DCE_RPC_srvsvc,
	DCE_RPC_spoolss,
	DCE_RPC_drs,
	DCE_RPC_winspipe,
	DCE_RPC_wkssvc,
	DCE_RPC_oxid,
	DCE_RPC_ISCMActivator,
%}

enum rpc_status %{
	RPC_SUCCESS,
	RPC_PROG_UNAVAIL,
	RPC_PROG_MISMATCH,
	RPC_PROC_UNAVAIL,
	RPC_GARBAGE_ARGS,
	RPC_SYSTEM_ERR,
	RPC_TIMEOUT,
	RPC_VERS_MISMATCH,
	RPC_AUTH_ERROR,
	RPC_UNKNOWN_ERROR,
%}


enum nfs3_proc %{   # NFSv3 procedures
	NFS3_PROC_NULL     = 0,  # done
	NFS3_PROC_GETATTR  = 1,  # done
	NFS3_PROC_SETATTR  = 2,
	NFS3_PROC_LOOKUP   = 3,  # done  
	NFS3_PROC_ACCESS   = 4,
	NFS3_PROC_READLINK = 5,  # done
	NFS3_PROC_READ     = 6,  # done
	NFS3_PROC_WRITE    = 7,  # done 
	NFS3_PROC_CREATE   = 8,
	NFS3_PROC_MKDIR    = 9,
	NFS3_PROC_SYMLINK  = 10,
	NFS3_PROC_MKNOD    = 11,
	NFS3_PROC_REMOVE   = 12,
	NFS3_PROC_RMDIR    = 13,
	NFS3_PROC_RENAME   = 14,
	NFS3_PROC_LINK     = 15,
	NFS3_PROC_READDIR  = 16,
	NFS3_PROC_READDIRPLUS  = 17,
	NFS3_PROC_FSSTAT   = 18,
	NFS3_PROC_FSINFO   = 19,
	NFS3_PROC_PATHCONF = 20,
	NFS3_PROC_COMMIT   = 21,
	NFS3_PROC_END_OF_PROCS = 22,
%}

enum nfs3_status %{  #NFSv3 return status
	NFS3ERR_OK          = 0,
	NFS3ERR_PERM        = 1,
	NFS3ERR_NOENT       = 2,
	NFS3ERR_IO          = 5,
	NFS3ERR_NXIO        = 6,
	NFS3ERR_ACCES       = 13,
	NFS3ERR_EXIST       = 17,
	NFS3ERR_XDEV        = 18,
	NFS3ERR_NODEV       = 19,
	NFS3ERR_NOTDIR      = 20,
	NFS3ERR_ISDIR       = 21,
	NFS3ERR_INVAL       = 22,
	NFS3ERR_FBIG        = 27,
	NFS3ERR_NOSPC       = 28,
	NFS3ERR_ROFS        = 30,
	NFS3ERR_MLINK       = 31,
	NFS3ERR_NAMETOOLONG = 63,
	NFS3ERR_NOTEMPTY    = 66,
	NFS3ERR_DQUOT       = 69,
	NFS3ERR_STALE       = 70,
	NFS3ERR_REMOTE      = 71,
	NFS3ERR_BADHANDLE   = 10001,
	NFS3ERR_NOT_SYNC    = 10002,
	NFS3ERR_BAD_COOKIE  = 10003,
	NFS3ERR_NOTSUPP     = 10004,
	NFS3ERR_TOOSMALL    = 10005,
	NFS3ERR_SERVERFAULT = 10006,
	NFS3ERR_BADTYPE     = 10007,
	NFS3ERR_JUKEBOX     = 10008,
	NFS3ERR_UNKNOWN     = 0xffffffff,
%}


enum nfs3_file_type %{
	NFS3_FTYPE_REG   = 1, 
	NFS3_FTYPE_DIR   = 2, 
	NFS3_FTYPE_BLK   = 3, 
	NFS3_FTYPE_CHR   = 4, 
	NFS3_FTYPE_LNK   = 5, 
	NFS3_FTYPE_SOCK  = 6, 
	NFS3_FTYPE_FIFO  = 7,
%}

enum nfs3_stable_how %{
	NFS3_UNSTABLE = 0,
	NFS3_DATA_SYNC = 1,
	NFS3_FILE_SYNC = 2,
%}

# Decleare record types that we want to access from the C++
# These are defined in bro.init
type nfs3_info: record;
type nfs3_fattr: record;
type nfs3_diropargs: record;
type nfs3_lookup_reply: record;
type nfs3_readargs: record;
type nfs3_read_reply: record;
type nfs3_readlink_reply: record;
type nfs3_writeargs: record;
type nfs3_wcc_attr: record;
type nfs3_write_reply: record;


type nfs3_fsstat: record;
