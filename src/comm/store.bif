
##! Functions to interface with broker's distributed data store.

%%{
#include "comm/Manager.h"
#include "comm/Store.h"
#include "comm/Data.h"
#include "Trigger.h"
%%}

module Store;

type Store::ExpiryTime: record;

type Store::QueryResult: record;

type Store::BackendOptions: record;

## Enumerates the possible storage backends.
enum BackendType %{
	MEMORY,
	SQLITE,
	ROCKSDB,
%}

## Create a master data store which contains key-value pairs.
##
## id: a unique name for the data store.
##
## b: the storage backend to use.
##
## options: tunes how some storage backends operate.
##
## Returns: a handle to the data store.
function Store::create_master%(id: string, b: BackendType &default = MEMORY,
                               options: BackendOptions &default = BackendOptions()%): opaque of Store::Handle
	%{
	auto id_str = id->CheckString();
	auto type = comm::StoreType::MASTER;
	auto rval = comm_mgr->LookupStore(id_str, type);

	if ( rval )
		{
		Ref(rval);
		return rval;
		}

	rval = new comm::StoreHandleVal(id_str, type,
	                                static_cast<BifEnum::Store::BackendType>(b->AsEnum()),
	                                options->AsRecordVal());
	assert(comm_mgr->AddStore(rval));
	return rval;
	%}

## Create a clone of a master data store which may live with a remote peer.
## A clone automatically synchronizes to the master by automatically receiving
## modifications and applying them locally.  Direct modifications are not
## possible, they must be sent through the master store, which then
## automatically broadcasts the changes out to clones.  But queries may be made
## directly against the local cloned copy, which may be resolved quicker than
## reaching out to a remote master store.
##
## id: the unique name which identifies the master data store.
##
## b: the storage backend to use.
##
## options: tunes how some storage backends operate.
##
## resync: the interval at which to re-attempt synchronizing with the master
##         store should the connection be lost.  If the clone has not yet
##         synchronized for the first time, updates and queries queue up until
##         the synchronization completes.  After, if the connection to the
##         master store is lost, queries continue to use the clone's version,
##         but updates will be lost until the master is once again available.
##
## Returns: a handle to the data store.
function Store::create_clone%(id: string, b: BackendType &default = MEMORY,
                              options: BackendOptions &default = BackendOptions(),
                              resync: interval &default = 1sec%): opaque of Store::Handle
	%{
	auto id_str = id->CheckString();
	auto type = comm::StoreType::CLONE;
	auto rval = comm_mgr->LookupStore(id_str, type);

	if ( rval )
		{
		Ref(rval);
		return rval;
		}

	rval = new comm::StoreHandleVal(id_str, type,
	                                static_cast<BifEnum::Store::BackendType>(b->AsEnum()),
	                                options->AsRecordVal(),
	                                std::chrono::duration<double>(resync));
	assert(comm_mgr->AddStore(rval));
	return rval;
	%}

## Create a frontend interface to an existing master data store that allows
## querying and updating its contents.
##
## id: the unique name which identifies the master data store.
##
## Returns: a handle to the data store.
function Store::create_frontend%(id: string%): opaque of Store::Handle
	%{
	auto id_str = id->CheckString();
	auto type = comm::StoreType::FRONTEND;
	auto rval = comm_mgr->LookupStore(id_str, type);

	if ( rval )
		{
		Ref(rval);
		return rval;
		}

	rval = new comm::StoreHandleVal(id_str, type, {}, nullptr);
	assert(comm_mgr->AddStore(rval));
	return rval;
	%}

## Close a data store.
##
## h: a data store handle.
##
## Returns: true if store was valid and is now closed.  The handle can no
##          longer be used for data store operations.
function Store::close_by_handle%(h: opaque of Store::Handle%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	return new Val(comm_mgr->CloseStore(handle->store->id(),
										handle->store_type), TYPE_BOOL);
	%}

###########################
# non-blocking update API #
###########################

## Insert a key-value pair in to the store.
##
## h: the handle of the store to modify.
##
## k: the key to insert.
##
## v: the value to insert.
##
## e: the expiration time of the key-value pair.
##
## Returns: false if the store handle was not valid.
function Store::insert%(h: opaque of Store::Handle,
                        k: Comm::Data, v: Comm::Data,
                        e: Store::ExpiryTime &default = Store::ExpiryTime()%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	auto& val = comm::opaque_field_to_data(v->AsRecordVal(), frame);

	using broker::store::expiration_time;
	broker::util::optional<expiration_time> expiry;

	auto abs_expiry_val = e->AsRecordVal()->Lookup(0);

	if ( abs_expiry_val )
		{
		expiry = expiration_time(abs_expiry_val->AsTime());
		handle->store->insert(key, val, expiry);
		return new Val(true, TYPE_BOOL);
		}

	auto rel_expiry_val = e->AsRecordVal()->Lookup(1);

	if ( rel_expiry_val )
		{
		auto ct = broker::time_point::now().value;
		expiry = expiration_time(rel_expiry_val->AsInterval(), ct);
		handle->store->insert(key, val, expiry);
		return new Val(true, TYPE_BOOL);
		}

	handle->store->insert(key, val, expiry);
	return new Val(true, TYPE_BOOL);
	%}

## Remove a key-value pair from the store.
##
## h: the handle of the store to modify.
##
## k: the key to remove.
##
## Returns: false if the store handle was not valid.
function Store::erase%(h: opaque of Store::Handle, k: Comm::Data%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	handle->store->erase(key);
	return new Val(true, TYPE_BOOL);
	%}

## Remove all key-value pairs from the store.
##
## h: the handle of the store to modify.
##
## Returns: false if the store handle was not valid.
function Store::clear%(h: opaque of Store::Handle%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	handle->store->clear();
	return new Val(true, TYPE_BOOL);
	%}

## Increment an integer value in a data store.
##
## h: the handle of the store to modify.
##
## k: the key whose associated value is to be modified.
##
## by: the amount to increment the value by.  A non-existent key will first
##     create it with an implicit value of zero before incrementing.
##
## Returns: false if the store handle was not valid.
function Store::increment%(h: opaque of Store::Handle,
                           k: Comm::Data, by: int &default = +1%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	handle->store->increment(key, by);
	return new Val(true, TYPE_BOOL);
	%}

## Decrement an integer value in a data store.
##
## h: the handle of the store to modify.
##
## k: the key whose associated value is to be modified.
##
## by: the amount to decrement the value by.  A non-existent key will first
##     create it with an implicit value of zero before decrementing.
##
## Returns: false if the store handle was not valid.
function Store::decrement%(h: opaque of Store::Handle,
                           k: Comm::Data, by: int &default = +1%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	handle->store->decrement(key, by);
	return new Val(true, TYPE_BOOL);
	%}

## Add an element to a set value in a data store.
##
## h: the handle of the store to modify.
##
## k: the key whose associated value is to be modified.
##
## element: the element to add to the set.  A non-existent key will first
##          create it with an implicit empty set value before modifying.
##
## Returns: false if the store handle was not valid.
function Store::add_to_set%(h: opaque of Store::Handle,
                            k: Comm::Data, element: Comm::Data%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	auto& ele = comm::opaque_field_to_data(element->AsRecordVal(), frame);
	handle->store->add_to_set(key, ele);
	return new Val(true, TYPE_BOOL);
	%}

## Remove an element from a set value in a data store.
##
## h: the handle of the store to modify.
##
## k: the key whose associated value is to be modified.
##
## element: the element to remove from the set.  A non-existent key will
##          implicitly create an empty set value associated with the key.
##
## Returns: false if the store handle was not valid.
function Store::remove_from_set%(h: opaque of Store::Handle,
                                 k: Comm::Data, element: Comm::Data%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	auto& ele = comm::opaque_field_to_data(element->AsRecordVal(), frame);
	handle->store->remove_from_set(key, ele);
	return new Val(true, TYPE_BOOL);
	%}

## Add a new item to the head of a vector value in a data store.
##
## h: the handle of store to modify.
##
## k: the key whose associated value is to be modified.
##
## item: the element to insert in to the vector.  A non-existent key will first
##       create empty vector value before modifying.
##
## Returns: the handle of store to modify.
function Store::push_left%(h: opaque of Store::Handle, k: Comm::Data,
                           items: Comm::DataVector%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	broker::vector items_vector;
	auto items_vv = items->AsVector();

	for ( auto i = 0u; i < items_vv->size(); ++i )
		{
		auto& item = comm::opaque_field_to_data((*items_vv)[i]->AsRecordVal(),
		                                        frame);
		items_vector.emplace_back(item);
		}

	handle->store->push_left(key, move(items_vector));
	return new Val(true, TYPE_BOOL);
	%}

## Add a new item to the tail of a vector value in a data store.
##
## h: the handle of store to modify.
##
## k: the key whose associated value is to be modified.
##
## item: the element to insert in to the vector.  A non-existent key will first
##       create empty vector value before modifying.
##
## Returns: the handle of store to modify.
function Store::push_right%(h: opaque of Store::Handle, k: Comm::Data,
                            items: Comm::DataVector%): bool
	%{
	auto handle = static_cast<comm::StoreHandleVal*>(h);

	if ( ! handle->store )
		return new Val(false, TYPE_BOOL);

	auto& key = comm::opaque_field_to_data(k->AsRecordVal(), frame);
	broker::vector items_vector;
	auto items_vv = items->AsVector();

	for ( auto i = 0u; i < items_vv->size(); ++i )
		{
		auto& item = comm::opaque_field_to_data((*items_vv)[i]->AsRecordVal(),
		                                        frame);
		items_vector.emplace_back(item);
		}

	handle->store->push_right(key, move(items_vector));
	return new Val(true, TYPE_BOOL);
	%}

##########################
# non-blocking query API #
##########################

%%{
static bool prepare_for_query(Val* opaque, Frame* frame,
                              comm::StoreHandleVal** handle,
                              double* timeout,
                              comm::StoreQueryCallback** cb)
    {
    *handle = static_cast<comm::StoreHandleVal*>(opaque);

    if ( ! (*handle)->store )
        return false;

    Trigger* trigger = frame->GetTrigger();

    if ( ! trigger )
        {
        reporter->PushLocation(frame->GetCall()->GetLocationInfo());
        reporter->Error("Store queries can only be called inside when-condition");
        reporter->PopLocation();
        return false;
        }

    *timeout = trigger->TimeoutValue();

    if ( *timeout < 0 )
        {
        reporter->PushLocation(frame->GetCall()->GetLocationInfo());
        reporter->Error("Store queries must specify a timeout block");
        reporter->PopLocation();
        return false;
        }

    frame->SetDelayed();
    trigger->Hold();
    *cb = new comm::StoreQueryCallback(trigger, frame->GetCall(),
                                       (*handle)->store->id(),
                                       (*handle)->store_type);
	comm_mgr->TrackStoreQuery(*cb);
    return true;
    }

%%}

## Pop the head of a data store vector value.
##
## h: the handle of the store to query.
##
## k: the key associated with the vector to modify.
##
## Returns: the result of the query.
function Store::pop_left%(h: opaque of Store::Handle,
                          k: Comm::Data%): Store::QueryResult
	%{
	if ( ! comm_mgr->Enabled() )
		return comm::query_result();

	Val* key = k->AsRecordVal()->Lookup(0);

	if ( ! key )
		return comm::query_result();

	double timeout;
	comm::StoreQueryCallback* cb;
	comm::StoreHandleVal* handle;

	if ( ! prepare_for_query(h, frame, &handle, &timeout, &cb) )
		return comm::query_result();

	handle->store->pop_left(static_cast<comm::DataVal*>(key)->data,
	                         std::chrono::duration<double>(timeout), cb);
	return 0;
	%}

## Pop the tail of a data store vector value.
##
## h: the handle of the store to query.
##
## k: the key associated with the vector to modify.
##
## Returns: the result of the query.
function Store::pop_right%(h: opaque of Store::Handle,
                           k: Comm::Data%): Store::QueryResult
	%{
	if ( ! comm_mgr->Enabled() )
		return comm::query_result();

	Val* key = k->AsRecordVal()->Lookup(0);

	if ( ! key )
		return comm::query_result();

	double timeout;
	comm::StoreQueryCallback* cb;
	comm::StoreHandleVal* handle;

	if ( ! prepare_for_query(h, frame, &handle, &timeout, &cb) )
		return comm::query_result();

	handle->store->pop_right(static_cast<comm::DataVal*>(key)->data,
	                         std::chrono::duration<double>(timeout), cb);
	return 0;
	%}

## Lookup the value associated with a key in a data store.
##
## h: the handle of the store to query.
##
## k: the key to lookup.
##
## Returns: the result of the query.
function Store::lookup%(h: opaque of Store::Handle,
                       k: Comm::Data%): Store::QueryResult
	%{
	if ( ! comm_mgr->Enabled() )
		return comm::query_result();

	Val* key = k->AsRecordVal()->Lookup(0);

	if ( ! key )
		return comm::query_result();

	double timeout;
	comm::StoreQueryCallback* cb;
	comm::StoreHandleVal* handle;

	if ( ! prepare_for_query(h, frame, &handle, &timeout, &cb) )
		return comm::query_result();

	handle->store->lookup(static_cast<comm::DataVal*>(key)->data,
	                      std::chrono::duration<double>(timeout), cb);
	return 0;
	%}

## Check if a data store contains a given key.
##
## h: the handle of the store to query.
##
## k: the key to check for existence.
##
## Returns: the result of the query (uses :bro:see:`Comm::BOOL`).
function Store::exists%(h: opaque of Store::Handle,
                        k: Comm::Data%): Store::QueryResult
	%{
	if ( ! comm_mgr->Enabled() )
		return comm::query_result();

	Val* key = k->AsRecordVal()->Lookup(0);

	if ( ! key )
		return comm::query_result();

	double timeout;
	comm::StoreQueryCallback* cb;
	comm::StoreHandleVal* handle;

	if ( ! prepare_for_query(h, frame, &handle, &timeout, &cb) )
		return comm::query_result();

	handle->store->exists(static_cast<comm::DataVal*>(key)->data,
	                      std::chrono::duration<double>(timeout), cb);
	return 0;
	%}

## Retrieve all keys in a data store.
##
## h: the handle of the store to query.
##
## Returns: the result of the query (uses :bro:see:`Comm::VECTOR`).
function Store::keys%(h: opaque of Store::Handle%): Store::QueryResult
	%{
	double timeout;
	comm::StoreQueryCallback* cb;
	comm::StoreHandleVal* handle;

	if ( ! prepare_for_query(h, frame, &handle, &timeout, &cb) )
		return comm::query_result();

	handle->store->keys(std::chrono::duration<double>(timeout), cb);
	return 0;
	%}

## Get the number of key-value pairs in a data store.
##
## h: the handle of the store to query.
##
## Returns: the result of the query (uses :bro:see:`Comm::COUNT`).
function Store::size%(h: opaque of Store::Handle%): Store::QueryResult
	%{
	if ( ! comm_mgr->Enabled() )
		return comm::query_result();

	double timeout;
	comm::StoreQueryCallback* cb;
	comm::StoreHandleVal* handle;

	if ( ! prepare_for_query(h, frame, &handle, &timeout, &cb) )
		return comm::query_result();

	handle->store->size(std::chrono::duration<double>(timeout), cb);
	return 0;
	%}
