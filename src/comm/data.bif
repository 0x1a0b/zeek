
##! Functions for inspecting and manipulating broker data.

%%{
#include "comm/Data.h"
%%}

module Comm;

## Enumerates the possible types that :bro:see:`Comm::Data` may be in terms of
## Bro data types.
enum DataType %{
	BOOL,
	INT,
	COUNT,
	DOUBLE,
	STRING,
	ADDR,
	SUBNET,
	PORT,
	TIME,
	INTERVAL,
	ENUM,
	SET,
	TABLE,
	VECTOR,
	RECORD,
%}

type Comm::Data: record;

type Comm::TableItem: record;

## Convert any Bro value in to communication data.
##
## d: any Bro value to attempt to convert (not all types are supported).
##
## Returns: the converted communication data which may not set its only
##          opaque field of the the conversion was not possible (the Bro data
##          type does not support being converted to communicaiton data).
function Comm::data%(d: any%): Comm::Data
	%{
	return comm::make_data_val(d);
	%}

## Retrieve the type of data associated with communication data.
##
## d: the communication data.
##
## Returns: the data type associated with the communication data.
function Comm::data_type%(d: Comm::Data%): Comm::DataType
	%{
	return comm::get_data_type(d->AsRecordVal(), frame);
	%}

## Convert communication data with a type of :bro:see:`Comm::BOOL` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_bool%(d: Comm::Data%): bool
	%{
	return comm::refine<bool>(d->AsRecordVal(), TYPE_BOOL, frame);
	%}

## Convert communication data with a type of :bro:see:`Comm::INT` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_int%(d: Comm::Data%): int
	%{
	return comm::refine<int64_t>(d->AsRecordVal(), TYPE_INT, frame);
	%}

## Convert communication data with a type of :bro:see:`Comm::COUNT` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_count%(d: Comm::Data%): count
	%{
	return comm::refine<uint64_t>(d->AsRecordVal(), TYPE_COUNT, frame);
	%}

## Convert communication data with a type of :bro:see:`Comm::DOUBLE` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_double%(d: Comm::Data%): double
	%{
	return comm::refine<double>(d->AsRecordVal(), TYPE_DOUBLE, frame);
	%}

## Convert communication data with a type of :bro:see:`Comm::STRING` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_string%(d: Comm::Data%): string
	%{
	return new StringVal(comm::require_data_type<std::string>(d->AsRecordVal(),
												              TYPE_STRING,
															  frame));
	%}

## Convert communication data with a type of :bro:see:`Comm::ADDR` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_addr%(d: Comm::Data%): addr
	%{
	auto& a = comm::require_data_type<broker::address>(d->AsRecordVal(),
													   TYPE_ADDR, frame);
	auto bits = reinterpret_cast<const in6_addr*>(&a.bytes());
	return new AddrVal(IPAddr(*bits));
	%}

## Convert communication data with a type of :bro:see:`Comm::SUBNET` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_subnet%(d: Comm::Data%): subnet
	%{
	auto& a = comm::require_data_type<broker::subnet>(d->AsRecordVal(),
													  TYPE_SUBNET, frame);
	auto bits = reinterpret_cast<const in6_addr*>(&a.network().bytes());
	return new SubNetVal(IPPrefix(IPAddr(*bits), a.length()));
	%}

## Convert communication data with a type of :bro:see:`Comm::PORT` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_port%(d: Comm::Data%): port
	%{
	auto& a = comm::require_data_type<broker::port>(d->AsRecordVal(),
													TYPE_SUBNET, frame);
	return new PortVal(a.number(), comm::to_bro_port_proto(a.type()));
	%}

## Convert communication data with a type of :bro:see:`Comm::TIME` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_time%(d: Comm::Data%): time
	%{
	auto v = comm::require_data_type<broker::time_point>(d->AsRecordVal(),
														TYPE_TIME, frame).value;
	return new Val(v, TYPE_TIME);
	%}

## Convert communication data with a type of :bro:see:`Comm::INTERVAL` to
## an actual Bro value.
##
## d: the communication data to convert.
##
## Returns: the value retrieved from the communication data.
function Comm::refine_to_interval%(d: Comm::Data%): interval
	%{
	auto v = comm::require_data_type<broker::time_duration>(d->AsRecordVal(),
														TYPE_TIME, frame).value;
	return new Val(v, TYPE_INTERVAL);
	%}

## Convert communication data with a type of :bro:see:`Comm::ENUM` to
## the name of the enum value.  :bro:see:`lookup_ID` may be used to convert
## the name to the actual enum value.
##
## d: the communication data to convert.
##
## Returns: the enum name retrieved from the communication data.
function Comm::refine_to_enum_name%(d: Comm::Data%): string
	%{
	auto& v = comm::require_data_type<broker::enum_value>(d->AsRecordVal(),
														TYPE_ENUM, frame).name;
	return new StringVal(v);
	%}

## Create communication data of type "set".
function Comm::set_create%(%): Comm::Data
	%{
	return comm::make_data_val(broker::set());
	%}

## Remove all elements within a set.
##
## s: the set to clear.
##
## Returns: always true.
function Comm::set_clear%(s: Comm::Data%): bool
	%{
	auto& v = comm::require_data_type<broker::set>(s->AsRecordVal(), TYPE_TABLE,
												   frame);
	v.clear();
	return new Val(true, TYPE_BOOL);
	%}

## Get the number of elements within a set.
##
## s: the set to query.
##
## Returns: the number of elements in the set.
function Comm::set_size%(s: Comm::Data%): count
	%{
	auto& v = comm::require_data_type<broker::set>(s->AsRecordVal(), TYPE_TABLE,
												   frame);
	return new Val(static_cast<uint64_t>(v.size()), TYPE_COUNT);
	%}

## Check if a set contains a particular element.
##
## s: the set to query.
##
## key: the element to check for existence.
##
## Returns: true if the key exists in the set.
function Comm::set_contains%(s: Comm::Data, key: Comm::Data%): bool
	%{
	auto& v = comm::require_data_type<broker::set>(s->AsRecordVal(), TYPE_TABLE,
												   frame);
	auto& k = comm::opaque_field_to_data(key->AsRecordVal(), frame);
	return new Val(v.find(k) != v.end(), TYPE_BOOL);
	%}

### Insert an element into a set.
##
## s: the set to modify.
##
## key: the element to insert.
##
## Returns: true if the key was inserted, or false if it already existed.
function Comm::set_insert%(s: Comm::Data, key: Comm::Data%): bool
	%{
	auto& v = comm::require_data_type<broker::set>(s->AsRecordVal(), TYPE_TABLE,
												   frame);
	auto& k = comm::opaque_field_to_data(key->AsRecordVal(), frame);
	return new Val(v.insert(k).second, TYPE_BOOL);
	%}

## Remove an element from a set.
##
## s: the set to modify.
##
## key: the element to remove.
##
## Returns: true if the element existed in the set and is now removed.
function Comm::set_remove%(s: Comm::Data, key: Comm::Data%): bool
	%{
	auto& v = comm::require_data_type<broker::set>(s->AsRecordVal(), TYPE_TABLE,
												   frame);
	auto& k = comm::opaque_field_to_data(key->AsRecordVal(), frame);
	return new Val(v.erase(k) > 0, TYPE_BOOL);
	%}

## Create an iterator for a set.  Note that this makes a copy of the set
## internally to ensure the iterator is always valid.
##
## s: the set to iterate over.
##
## Returns: an iterator.
function Comm::set_iterator%(s: Comm::Data%): opaque of Comm::SetIterator
	%{
	return new comm::SetIterator(s->AsRecordVal(), TYPE_TABLE, frame);
	%}

## Check if there are no more elements to iterate over.
##
## it: an iterator.
##
## Returns: true if there are no more elements to iterator over, i.e.
##          the iterator is one-past-the-final-element.
function Comm::set_iterator_last%(it: opaque of Comm::SetIterator%): bool
	%{
	auto set_it = static_cast<comm::SetIterator*>(it);
	return new Val(set_it->it == set_it->dat.end(), TYPE_BOOL);
	%}

## Advance an iterator.
##
## it: an iterator.
##
## Returns: true if the iterator, after advancing, still references an element
##          in the collection.  False if the iterator, after advancing, is
##          one-past-the-final-element.
function Comm::set_iterator_next%(it: opaque of Comm::SetIterator%): bool
	%{
	auto set_it = static_cast<comm::SetIterator*>(it);

	if ( set_it->it == set_it->dat.end() )
		return new Val(false, TYPE_BOOL);

	++set_it->it;
	return new Val(set_it->it != set_it->dat.end(), TYPE_BOOL);
	%}

## Retrieve the data at an iterator's current position.
##
## it: an iterator.
##
## Returns: element in the collection that the iterator currently references.
function Comm::set_iterator_value%(it: opaque of Comm::SetIterator%): Comm::Data
	%{
	auto set_it = static_cast<comm::SetIterator*>(it);
	auto rval = new RecordVal(BifType::Record::Comm::Data);

	if ( set_it->it == set_it->dat.end() )
		{
		reporter->PushLocation(frame->GetCall()->GetLocationInfo());
		reporter->Warning("attempt to retrieve value of invalid set iterator");
		reporter->PopLocation();
		return rval;
		}

	rval->Assign(0, new comm::DataVal(*set_it->it));
	return rval;
	%}

## Create communication data of type "table".
function Comm::table_create%(%): Comm::Data
	%{
	return comm::make_data_val(broker::table());
	%}

## Remove all elements within a table.
##
## t: the table to clear.
##
## Returns: always true.
function Comm::table_clear%(t: Comm::Data%): bool
	%{
	auto& v = comm::require_data_type<broker::table>(t->AsRecordVal(),
													 TYPE_TABLE, frame);
	v.clear();
	return new Val(true, TYPE_BOOL);
	%}

## Get the number of elements within a table.
##
## t: the table to query.
##
## Returns: the number of elements in the table.
function Comm::table_size%(t: Comm::Data%): count
	%{
	auto& v = comm::require_data_type<broker::table>(t->AsRecordVal(),
													 TYPE_TABLE, frame);
	return new Val(static_cast<uint64_t>(v.size()), TYPE_COUNT);
	%}

## Check if a table contains a particular key.
##
## t: the table to query.
##
## key: the key to check for existence.
##
## Returns: true if the key exists in the set.
function Comm::table_contains%(t: Comm::Data, key: Comm::Data%): bool
	%{
	auto& v = comm::require_data_type<broker::table>(t->AsRecordVal(),
													 TYPE_TABLE, frame);
	auto& k = comm::opaque_field_to_data(key->AsRecordVal(), frame);
	return new Val(v.find(k) != v.end(), TYPE_BOOL);
	%}

## Insert a key-value pair into a table.
##
## t: the table to modify.
##
## key: the key at which to insert the value.
##
## val: the value to insert.
##
## Returns: true if the key-value pair was inserted, or false if the key
##          already existed in the table.
function Comm::table_insert%(t: Comm::Data, key: Comm::Data, val: Comm::Data%): Comm::Data
	%{
	auto& table = comm::require_data_type<broker::table>(t->AsRecordVal(),
													     TYPE_TABLE, frame);
	auto& k = comm::opaque_field_to_data(key->AsRecordVal(), frame);
	auto& v = comm::opaque_field_to_data(val->AsRecordVal(), frame);

	try
		{
		auto& prev = table.at(k);
		auto rval = comm::make_data_val(move(prev));
		prev = v;
		return rval;
		}
	catch (const std::out_of_range&)
		{
		table[k] = v;
		return new RecordVal(BifType::Record::Comm::Data);
		}
	%}

## Remove a key-value pair from a table.
##
## t: the table to modify.
##
## key: the key to remove from the table.
##
## Returns: the value associated with the key.  If the key did not exist, then
##          the optional field of the returned record is not set.
function Comm::table_remove%(t: Comm::Data, key: Comm::Data%): Comm::Data
	%{
	auto& table = comm::require_data_type<broker::table>(t->AsRecordVal(),
													     TYPE_TABLE, frame);
	auto& k = comm::opaque_field_to_data(key->AsRecordVal(), frame);
	auto it = table.find(k);

	if ( it == table.end() )
		return new RecordVal(BifType::Record::Comm::Data);
	else
		{
		auto rval = comm::make_data_val(move(it->second));
		table.erase(it);
		return rval;
		}
	%}

## Retrieve a value from a table.
##
## t: the table to query.
##
## key: the key to lookup.
##
## Returns: the value associated with the key.  If the key did not exist, then
##          the optional field of the returned record is not set.
function Comm::table_lookup%(t: Comm::Data, key: Comm::Data%): Comm::Data
	%{
	auto& table = comm::require_data_type<broker::table>(t->AsRecordVal(),
													     TYPE_TABLE, frame);
	auto& k = comm::opaque_field_to_data(key->AsRecordVal(), frame);
	auto it = table.find(k);

	if ( it == table.end() )
		return new RecordVal(BifType::Record::Comm::Data);
	else
		return comm::make_data_val(it->second);
	%}

## Create an iterator for a table.  Note that this makes a copy of the table
## internally to ensure the iterator is always valid.
##
## t: the table to iterate over.
##
## Returns: an iterator.
function Comm::table_iterator%(t: Comm::Data%): opaque of Comm::TableIterator
	%{
	return new comm::TableIterator(t->AsRecordVal(), TYPE_TABLE, frame);
	%}

## Check if there are no more elements to iterate over.
##
## it: an iterator.
##
## Returns: true if there are no more elements to iterator over, i.e.
##          the iterator is one-past-the-final-element.
function Comm::table_iterator_last%(it: opaque of Comm::TableIterator%): bool
	%{
	auto ti = static_cast<comm::TableIterator*>(it);
	return new Val(ti->it == ti->dat.end(), TYPE_BOOL);
	%}

## Advance an iterator.
##
## it: an iterator.
##
## Returns: true if the iterator, after advancing, still references an element
##          in the collection.  False if the iterator, after advancing, is
##          one-past-the-final-element.
function Comm::table_iterator_next%(it: opaque of Comm::TableIterator%): bool
	%{
	auto ti = static_cast<comm::TableIterator*>(it);

	if ( ti->it == ti->dat.end() )
		return new Val(false, TYPE_BOOL);

	++ti->it;
	return new Val(ti->it != ti->dat.end(), TYPE_BOOL);
	%}

## Retrieve the data at an iterator's current position.
##
## it: an iterator.
##
## Returns: element in the collection that the iterator currently references.
function Comm::table_iterator_value%(it: opaque of Comm::TableIterator%): Comm::TableItem
	%{
	auto ti = static_cast<comm::TableIterator*>(it);
	auto rval = new RecordVal(BifType::Record::Comm::TableItem);
	auto key_val = new RecordVal(BifType::Record::Comm::Data);
	auto val_val = new RecordVal(BifType::Record::Comm::Data);
	rval->Assign(0, key_val);
	rval->Assign(1, val_val);

	if ( ti->it == ti->dat.end() )
		{
		reporter->PushLocation(frame->GetCall()->GetLocationInfo());
		reporter->Warning("attempt to retrieve value of invalid table iterator");
		reporter->PopLocation();
		return rval;
		}

	key_val->Assign(0, new comm::DataVal(ti->it->first));
	val_val->Assign(0, new comm::DataVal(ti->it->second));
	return rval;
	%}

## Create communication data of type "vector".
function Comm::vector_create%(%): Comm::Data
	%{
	return comm::make_data_val(broker::vector());
	%}

## Remove all elements within a vector.
##
## v: the vector to clear.
##
## Returns: always true.
function Comm::vector_clear%(v: Comm::Data%): bool
	%{
	auto& vec = comm::require_data_type<broker::vector>(v->AsRecordVal(),
													    TYPE_VECTOR, frame);
	vec.clear();
	return new Val(true, TYPE_BOOL);
	%}

## Get the number of elements within a vector.
##
## v: the vector to query.
##
## Returns: the number of elements in the vector.
function Comm::vector_size%(v: Comm::Data%): count
	%{
	auto& vec = comm::require_data_type<broker::vector>(v->AsRecordVal(),
													    TYPE_VECTOR, frame);
	return new Val(static_cast<uint64_t>(vec.size()), TYPE_COUNT);
	%}

## Insert an element into a vector at a particular position, possibly displacing
## existing elements (insertion always grows the size of the vector by one).
##
## v: the vector to modify.
##
## d: the element to insert.
##
## idx: the index at which to insert the data.  If it is greater than the
##      current size of the vector, the element is inserted at the end.
##
## Returns: always true.
function Comm::vector_insert%(v: Comm::Data, d: Comm::Data, idx: count%): bool
	%{
	auto& vec = comm::require_data_type<broker::vector>(v->AsRecordVal(),
													    TYPE_VECTOR, frame);
	auto& item = comm::opaque_field_to_data(d->AsRecordVal(), frame);
	idx = min(idx, static_cast<uint64_t>(vec.size()));
	vec.insert(vec.begin() + idx, item);
	return new Val(true, TYPE_BOOL);
	%}

## Replace an element in a vector at a particular position.
##
## v: the vector to modify.
##
## d: the element to insert.
##
## idx: the index to replace.
##
## Returns: the value that was just evicted.  If the index was larger than any
##          valid index, the optional field of the returned record is not set.
function Comm::vector_replace%(v: Comm::Data, d: Comm::Data, idx: count%): Comm::Data
	%{
	auto& vec = comm::require_data_type<broker::vector>(v->AsRecordVal(),
													    TYPE_VECTOR, frame);
	auto& item = comm::opaque_field_to_data(d->AsRecordVal(), frame);

	if ( idx >= vec.size() )
		return new RecordVal(BifType::Record::Comm::Data);

	auto rval = comm::make_data_val(move(vec[idx]));
	vec[idx] = item;
	return rval;
	%}

## Remove an element from a vector at a particular position.
##
## v: the vector to modify.
##
## idx: the index to remove.
##
## Returns: the value that was just evicted.  If the index was larger than any
##          valid index, the optional field of the returned record is not set.
function Comm::vector_remove%(v: Comm::Data, idx: count%): Comm::Data
	%{
	auto& vec = comm::require_data_type<broker::vector>(v->AsRecordVal(),
													    TYPE_VECTOR, frame);

	if ( idx >= vec.size() )
		return new RecordVal(BifType::Record::Comm::Data);

	auto rval = comm::make_data_val(move(vec[idx]));
	vec.erase(vec.begin() + idx);
	return rval;
	%}

## Lookup an element in a vector at a particular position.
##
## v: the vector to query.
##
## idx: the index to lookup.
##
## Returns: the value at the index.  If the index was larger than any
##          valid index, the optional field of the returned record is not set.
function Comm::vector_lookup%(v: Comm::Data, idx: count%): Comm::Data
	%{
	auto& vec = comm::require_data_type<broker::vector>(v->AsRecordVal(),
													    TYPE_VECTOR, frame);

	if ( idx >= vec.size() )
		return new RecordVal(BifType::Record::Comm::Data);

	return comm::make_data_val(vec[idx]);
	%}

## Create an iterator for a vector.  Note that this makes a copy of the vector
## internally to ensure the iterator is always valid.
##
## v: the vector to iterate over.
##
## Returns: an iterator.
function Comm::vector_iterator%(v: Comm::Data%): opaque of Comm::VectorIterator
	%{
	return new comm::VectorIterator(v->AsRecordVal(), TYPE_VECTOR, frame);
	%}

## Check if there are no more elements to iterate over.
##
## it: an iterator.
##
## Returns: true if there are no more elements to iterator over, i.e.
##          the iterator is one-past-the-final-element.
function Comm::vector_iterator_last%(it: opaque of Comm::VectorIterator%): bool
	%{
	auto vi = static_cast<comm::VectorIterator*>(it);
	return new Val(vi->it == vi->dat.end(), TYPE_BOOL);
	%}

## Advance an iterator.
##
## it: an iterator.
##
## Returns: true if the iterator, after advancing, still references an element
##          in the collection.  False if the iterator, after advancing, is
##          one-past-the-final-element.
function Comm::vector_iterator_next%(it: opaque of Comm::VectorIterator%): bool
	%{
	auto vi = static_cast<comm::VectorIterator*>(it);

	if ( vi->it == vi->dat.end() )
		return new Val(false, TYPE_BOOL);

	++vi->it;
	return new Val(vi->it != vi->dat.end(), TYPE_BOOL);
	%}

## Retrieve the data at an iterator's current position.
##
## it: an iterator.
##
## Returns: element in the collection that the iterator currently references.
function Comm::vector_iterator_value%(it: opaque of Comm::VectorIterator%): Comm::Data
	%{
	auto vi = static_cast<comm::VectorIterator*>(it);
	auto rval = new RecordVal(BifType::Record::Comm::Data);

	if ( vi->it == vi->dat.end() )
		{
		reporter->PushLocation(frame->GetCall()->GetLocationInfo());
		reporter->Warning("attempt to retrieve value of invalid vector iterator");
		reporter->PopLocation();
		return rval;
		}

	rval->Assign(0, new comm::DataVal(*vi->it));
	return rval;
	%}

## Create communication data of type "record".
##
## sz: the number of fields in the record.
##
## Returns: record data, with all fields uninitialized.
function Comm::record_create%(sz: count%): Comm::Data
	%{
	return comm::make_data_val(broker::record(std::vector<broker::record::field>(sz)));
	%}

## Get the number of fields within a record.
##
## r: the record to query.
##
## Returns: the number of fields in the record.
function Comm::record_size%(r: Comm::Data%): count
	%{
	auto& v = comm::require_data_type<broker::record>(r->AsRecordVal(),
													  TYPE_RECORD, frame);
	return new Val(static_cast<uint64_t>(v.fields.size()), TYPE_COUNT);
	%}

## Replace a field in a record at a particular position.
##
## t: the table to modify.
##
## d: the new field value to assign.
##
## idx: the index to replace.
##
## Returns: false if the index was larger than any valid index, else true.
function Comm::record_assign%(r: Comm::Data, d: Comm::Data, idx: count%): bool
	%{
	auto& v = comm::require_data_type<broker::record>(r->AsRecordVal(),
													  TYPE_RECORD, frame);
	auto& item = comm::opaque_field_to_data(d->AsRecordVal(), frame);

	if ( idx >= v.fields.size() )
		return new Val(false, TYPE_BOOL);

	v.fields[idx] = item;
	return new Val(true, TYPE_BOOL);
	%}

## Lookup a field in a record at a particular position.
##
## r: the record to query.
##
## idx: the index to lookup.
##
## Returns: the value at the index.  The optional field of the returned record
##          may not be set if the field of the record has no value or if the
##          the index was not valid.
function Comm::record_lookup%(r: Comm::Data, idx: count%): Comm::Data
	%{
	auto& v = comm::require_data_type<broker::record>(r->AsRecordVal(),
													  TYPE_RECORD, frame);

	if ( idx >= v.size() )
		return new RecordVal(BifType::Record::Comm::Data);

	if ( ! v.fields[idx] )
		return new RecordVal(BifType::Record::Comm::Data);

	return comm::make_data_val(*v.fields[idx]);
	%}

## Create an iterator for a record.  Note that this makes a copy of the record
## internally to ensure the iterator is always valid.
##
## r: the record to iterate over.
##
## Returns: an iterator.
function Comm::record_iterator%(r: Comm::Data%): opaque of Comm::RecordIterator
	%{
	return new comm::RecordIterator(r->AsRecordVal(), TYPE_RECORD, frame);
	%}

## Check if there are no more elements to iterate over.
##
## it: an iterator.
##
## Returns: true if there are no more elements to iterator over, i.e.
##          the iterator is one-past-the-final-element.
function Comm::record_iterator_last%(it: opaque of Comm::RecordIterator%): bool
	%{
	auto ri = static_cast<comm::RecordIterator*>(it);
	return new Val(ri->it == ri->dat.fields.end(), TYPE_BOOL);
	%}

## Advance an iterator.
##
## it: an iterator.
##
## Returns: true if the iterator, after advancing, still references an element
##          in the collection.  False if the iterator, after advancing, is
##          one-past-the-final-element.
function Comm::record_iterator_next%(it: opaque of Comm::RecordIterator%): bool
	%{
	auto ri = static_cast<comm::RecordIterator*>(it);

	if ( ri->it == ri->dat.fields.end() )
		return new Val(false, TYPE_BOOL);

	++ri->it;
	return new Val(ri->it != ri->dat.fields.end(), TYPE_BOOL);
	%}

## Retrieve the data at an iterator's current position.
##
## it: an iterator.
##
## Returns: element in the collection that the iterator currently references.
function Comm::record_iterator_value%(it: opaque of Comm::RecordIterator%): Comm::Data
	%{
	auto ri = static_cast<comm::RecordIterator*>(it);
	auto rval = new RecordVal(BifType::Record::Comm::Data);

	if ( ri->it == ri->dat.fields.end() )
		{
		reporter->PushLocation(frame->GetCall()->GetLocationInfo());
		reporter->Warning("attempt to retrieve value of invalid record iterator");
		reporter->PopLocation();
		return rval;
		}

	if ( ! *ri->it )
		return rval; // field isn't set

	rval->Assign(0, new comm::DataVal(**ri->it));
	return rval;
	%}
