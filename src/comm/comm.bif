
%%{
#include "comm/Manager.h"
%%}

module Comm;

type Comm::SendFlags: record;

event Comm::remote_connection_established%(peer_address: string,
                                           peer_port: port,
                                           peer_name: string%);
event Comm::remote_connection_broken%(peer_address: string,
                                      peer_port: port%);
event Comm::remote_connection_incompatible%(peer_address: string,
                                            peer_port: port%);

function Comm::listen%(p: port, a: string &default = ""%): bool
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("listen port must use tcp");
		return new Val(false, TYPE_BOOL);
		}

	auto rval = comm_mgr->Listen(p->Port(), a->Len() ? a->CheckString() : 0);
	return new Val(rval, TYPE_BOOL);
	%}

function Comm::connect%(a: string, p: port, retry: interval%): bool
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("remote connection port must use tcp");
		return new Val(false, TYPE_BOOL);
		}

	auto rval = comm_mgr->Connect(a->CheckString(), p->Port(),
	                              std::chrono::duration<double>(retry));
	return new Val(rval, TYPE_BOOL);
	%}

function Comm::disconnect%(a: string, p: port%): bool
	%{
	if ( ! p->IsTCP() )
		{
		reporter->Error("remote connection port must use tcp");
		return new Val(false, TYPE_BOOL);
		}

	auto rval = comm_mgr->Disconnect(a->CheckString(), p->Port());
	return new Val(rval, TYPE_BOOL);
	%}

event Comm::print_handler%(msg: string%);

function Comm::print%(topic: string, msg: string,
                      flags: SendFlags &default = SendFlags()%): bool
	%{
	auto rval = comm_mgr->Print(topic->CheckString(), msg->CheckString(),
	                            flags);
	return new Val(rval, TYPE_BOOL);
	%}

function Comm::subscribe_to_prints%(topic_prefix: string &default = ""%): bool
	%{
	auto rval = comm_mgr->SubscribeToPrints(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Comm::unsubscribe_to_prints%(topic_prefix: string &default = ""%): bool
	%{
	auto rval = comm_mgr->UnsubscribeToPrints(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}
