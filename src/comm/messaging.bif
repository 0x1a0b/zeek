
##! Functions for peering and various messaging patterns (e.g. print/log/event).

%%{
#include "comm/Manager.h"
#include "logging/Manager.h"
%%}

module Comm;

type Comm::SendFlags: record;

type Comm::EventArgs: record;

## Used to handle remote print messages from peers that call
## :bro:see:`Comm::print`.
event Comm::print_handler%(msg: string%);

## Print a simple message to any interested peers.  The receiver can use
## :bro:see:`Comm::print_handler` to handle messages.
##
## topic: a topic associated with the printed message.
##
## msg: the print message to send to peers.
##
## flags: tune the behavior of how the message is sent.
##
## Returns: true if the message is sent.
function Comm::print%(topic: string, msg: string,
                      flags: SendFlags &default = SendFlags()%): bool
	%{
	auto rval = comm_mgr->Print(topic->CheckString(), msg->CheckString(),
	                            flags);
	return new Val(rval, TYPE_BOOL);
	%}

## Register interest in all peer print messages that use a certain topic prefix.
## use :bro:see:`Comm::print_handler` to handle received messages.
##
## topic_prefix: a prefix to match against remote message topics.
##               e.g. an empty prefix matches everything and "a" matches
##               "alice" and "amy" but not "bob".
##
## Returns: true if it's a new print subscription and it is now registered.
function Comm::subscribe_to_prints%(topic_prefix: string%): bool
	%{
	auto rval = comm_mgr->SubscribeToPrints(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

## Unregister interest in all peer print messages that use a topic prefix.
##
## topic_prefix: a prefix previously supplied to a successful call to
##               :bro:see:`Comm::subscribe_to_prints`.
##
## Returns: true if interest in the topic prefix is no longer advertised.
function Comm::unsubscribe_to_prints%(topic_prefix: string%): bool
	%{
	auto rval = comm_mgr->UnsubscribeToPrints(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

## Create a data structure that may be used to send a remote event via
## :bro:see:`Comm::event`.
##
## args: an event, followed by a list of argument values that may be used
##       to call it.
##
## Returns: opaque communication data that may be used to send a remote event.
function Comm::event_args%(...%): Comm::EventArgs
	%{
	auto rval = comm_mgr->MakeEventArgs(@ARGS@);
	return rval;
	%}

## Send an event to any interested peers.
##
## topic: a topic associated with the event message.
##
## args: event arguments as made by :bro:see:`Comm::event_args`.
##
## flags: tune the behavior of how the message is sent.
##
## Returns: true if the message is sent.
function Comm::event%(topic: string, args: Comm::EventArgs,
                      flags: SendFlags &default = SendFlags()%): bool
	%{
	auto rval = comm_mgr->Event(topic->CheckString(), args->AsRecordVal(),
	                            flags);
	return new Val(rval, TYPE_BOOL);
	%}

## Automatically send an event to any interested peers whenever it is
## locally dispatched (e.g. using "event my_event(...);" in a script).
##
## topic: a topic string associated with the event message.
##        Peers advertise interest by registering a subscription to some prefix
##        of this topic name.
##
## ev: a Bro event value.
##
## flags: tune the behavior of how the message is send.
##
## Returns: true if automatic event sending is now enabled.
function Comm::auto_event%(topic: string, ev: any,
                           flags: SendFlags &default = SendFlags()%): bool
	%{
	auto rval = comm_mgr->AutoEvent(topic->CheckString(), ev, flags);
	return new Val(rval, TYPE_BOOL);
	%}

## Stop automatically sending an event to peers upon local dispatch.
##
## topic: a topic originally given to :bro:see:`Comm::auto_event`.
##
## ev: an event originally given to :bro:see:`Comm::auto_event`.
##
## Returns: true if automatic events will no occur for the topic/event pair.
function Comm::auto_event_stop%(topic: string, ev: any%): bool
	%{
	auto rval = comm_mgr->AutoEventStop(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

## Register interest in all peer event messages that use a certain topic prefix.
##
## topic_prefix: a prefix to match against remote message topics.
##               e.g. an empty prefix matches everything and "a" matches
##               "alice" and "amy" but not "bob".
##
## Returns: true if it's a new event subscription and it is now registered.
function Comm::subscribe_to_events%(topic_prefix: string%): bool
	%{
	auto rval = comm_mgr->SubscribeToEvents(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

## Unregister interest in all peer event messages that use a topic prefix.
##
## topic_prefix: a prefix previously supplied to a successful call to
##               :bro:see:`Comm::subscribe_to_events`.
##
## Returns: true if interest in the topic prefix is no longer advertised.
function Comm::unsubscribe_to_events%(topic_prefix: string%): bool
	%{
	auto rval = comm_mgr->UnsubscribeToEvents(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

## Enable remote logs for a given log stream.
##
## id: the log stream to enable remote logs for.
##
## flags: tune the behavior of how log entry messages are sent.
##
## Returns: true if remote logs are enabled for the stream.
function
Comm::enable_remote_logs%(id: Log::ID,
                          flags: SendFlags &default = SendFlags()%): bool
	%{
	auto rval = log_mgr->EnableRemoteLogs(id->AsEnumVal(),
	                                   comm::Manager::send_flags_to_int(flags));
	return new Val(rval, TYPE_BOOL);
	%}

## Disable remote logs for a given log stream.
##
## id: the log stream to disable remote logs for.
##
## Returns: true if remote logs are disabled for the stream.
function Comm::disable_remote_logs%(id: Log::ID%): bool
	%{
	auto rval = log_mgr->DisableRemoteLogs(id->AsEnumVal());
	return new Val(rval, TYPE_BOOL);
	%}

## Returns: true if remote logs are enabled for the given stream.
function Comm::remote_logs_enabled%(id: Log::ID%): bool
	%{
	auto rval = log_mgr->RemoteLogsAreEnabled(id->AsEnumVal());
	return new Val(rval, TYPE_BOOL);
	%}

## Register interest in all peer log messages that use a certain topic prefix.
## Logs are implicitly sent with topic "bro/log/<stream-name>" and the
## receiving side processes them through the logging framework as usual.
##
## topic_prefix: a prefix to match against remote message topics.
##               e.g. an empty prefix matches everything and "a" matches
##               "alice" and "amy" but not "bob".
##
## Returns: true if it's a new log subscription and it is now registered.
function Comm::subscribe_to_logs%(topic_prefix: string%): bool
	%{
	auto rval = comm_mgr->SubscribeToLogs(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

## Unregister interest in all peer log messages that use a topic prefix.
## Logs are implicitly sent with topic "bro/log/<stream-name>" and the
## receiving side processes them through the logging framework as usual.
##
## topic_prefix: a prefix previously supplied to a successful call to
##               :bro:see:`Comm::subscribe_to_logs`.
##
## Returns: true if interest in the topic prefix is no longer advertised.
function Comm::unsubscribe_to_logs%(topic_prefix: string%): bool
	%{
	auto rval = comm_mgr->UnsubscribeToLogs(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}
